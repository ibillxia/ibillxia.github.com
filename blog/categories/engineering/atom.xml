<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/categories/engineering/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2025-06-01T13:56:45+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UML需求分析步骤实例解析]]></title>
    <link href="http://ibillxia.github.io/blog/2010/10/26/UML-model-building-example-for-requirement-analysis/"/>
    <updated>2010-10-26T13:08:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/10/26/UML-model-building-example-for-requirement-analysis</id>
    <content type="html"><![CDATA[<p>本节向大家介绍一下UML需求分析的一般步骤，本节用实例向大家介绍，相信通过本节的介绍你对UML需求分析有一定的认识。下面让我们一起来学习具体介绍吧。</p>


<h2>基于UML需求分析</h2>


<p>在初步的业务需求描述已经形成的前提下，基于UML需求分析大致可分为以下步骤：</br>
（1）利用用例及用例图表示需求。从业务需求描述出发获取执行者和场景；对场景进行汇总、分类、抽象；形成用例；确定执行者与用例、用例与用例图
之间的关系，生成用例图。</br>
（2）利用包图及类图表示目标软件系统的总体框架结构。根据领域知识、业务需求描述和既往经验设计目标软件系统的顶层架构；从业务需求描述中
提取“关键概念”，形成领域概念模型；从概念模型和用例出发，研究系统中主要的类之间的关系，生成类图。</br>
上述两个步骤并没有时序关系，它们可以并行展开，如图1所示。</br>
<center><img src="/images/2010/IMAG2010102601.jpg"></center>
</p>




<p>本节将依次介绍上述步骤中涉及的UML语言机制，并结合“家庭保安系统”实例说明每步骤中基于UML需求分析方法。</p>


<!--more-->




<h2>开发场景</h2>


<p>场景是指从单个执行者的角度观察目标软件系统的功能和外部行为。这种功能通过系统与用户之间的交互来表征。因此也可以说，场景是用户与系统之间
进行交互的一组具体的动作。相对于用例而言，场景是用例的实例，而用例是某类场景的共同抽象。</br>
对场景的完整描述应包含场景名称、执行者实例，前置条件、事件流和后置条件。</br>
例如，“家庭保安系统”的初步需求描述：“家庭保安系统”的软件允许用户在安装时进行系统配置，
实施对传感器的监控并通过控制面板与用户进行信息交互。</p>




<p>配置操作包括：</br>
（1）指定每一传感器的种类和编号；</br>
（2）设置开、关机密码；</br>
（3）指定报警电话电码；</br>
（4）指定报警延迟和电话重拨延迟时间（以秒为单位）；</br>
当软件系统收到传感器发出的数据后，判别是否出现异常事件。如果是，则在指定的延迟时间内拨报警电话号码，拨号操作将按照重拨延迟反复进行，
直至电话接通。然后软件系统负责报告时间、地点和异常事件的性质。</p>




<p>开机后，软件系统负责显示当前工作状态，接收并处理用户指令。</p>




<p>根据以上描述，该系统具有“系统配置”、“开机”、“关机”、“门窗监测”、“烟雾监测”和“复位”等场景。其中，门窗监测场景的具体描述如下：</br>
场景名称：门窗监测。</br>
参与执行者实例：警报器、报警电话、显示器和门窗监视器。</br>
前置条件：系统已开机。</br>
事件流：</br>
（1）门窗监视器发现门或窗户发生异动，向软件系统报告异常事件。</br>
（2）软件系统启动警报器并拨报警电话号码。</br>
（3）报警电话接通后，软件系统播出语音，报告异常事件发生的时间、地点和事件的性质（门窗异动）。</br>
（4）系统在控制面板的显示器上显示报警时间及当前状态（报警：门窗异动）。</br>
后置条件：系统处于“报警”状态。</p>




<p>UML需求分析过程中根据场景作用的不同，可以将其划分为以下类型：</br>
（1）实际场景。对实际的业务处理流程或其优化流程的描述。实际场景是用户需求的重要组成部分。</br>
（2）设想场景。分析人员对目标软件系统投入应用后经改进或优化的业务流程的描述。这种场景可视为一种纸面原型，主要用于帮助分析人员挖掘潜在的用户需求。</br>
（3）评价场景。以确认需求或提出改进建议为主要目的的业务流程描述。评价场景可以在用例生成后用例进行实例化而形成，以便用户对用例进行评价或改进。</br>
（4）培训场景。面向开发人员及用户解释系统的功能和外部行为的业务流程描述。</p>




<p>对以下问题的回答有助于分析人员进行UML需求分析获取场景：</br>
（1）目标软件系统有哪些执行者？</br>
（2）执行者希望系统执行哪些任务？</br>
（3）执行者希望获得哪些信息？这些信息由谁生成？由谁修改？</br>
（4）执行者需要通知系统哪些事件？系统响应这些事件时会表现出哪些外部行为？</br>
（5）系统将通告执行者哪些事件？</br>
总之，确定执行者和场景的关键在于理解业务领域和初步需求描述文档。场景将促成开发人员和用户对业务处理流程和目标软件系统的功能范围的共同理解。
在场景确定之后，通过对场景的汇总、分类归并和抽象即可形成用例。本节关于UML需求分析相关内容介绍到这里。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于UML的图书管理系统的需求分析]]></title>
    <link href="http://ibillxia.github.io/blog/2010/07/18/UML-based-library-management-system-requirement-analysis-and-system-design/"/>
    <updated>2010-07-18T10:06:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/07/18/UML-based-library-management-system-requirement-analysis-and-system-design</id>
    <content type="html"><![CDATA[<p>一个图书馆的图书资料库在正常运转中总是面对大量的读者信息、书籍信息以及两者相互作用产生的借书信息、还书信息。
图书馆作为一个信息资源的集散地，图书和用户借阅资料繁多，包含着很多的信息数据。图书管理系统的开发和应用主要通过
两个步骤来实现：首先是基于系统功能的需求分析，其次是系统模型的设计和实现。
</p>




<h2>1.需求分析</h2>


<p>需求分析是软件工程过程的一个重要阶段,其中一个主要任务是确定系统的功能需求,采用面向对象方法,基于UML的可视化
系统需求分析,因为有用户的积极参与,既可以加快设计者对于问题的理解,又能够在系统描述方面减少语义差异,保证分析的
正确性。需求分析的目标就是建立需求模型,即从功能需求出发建立用例模型, UML的用例视图从用户的需求中提取,以盒图的
方式描述待开发的系统的功能需求。每个用例都指定了客户的需求即他们需要系统干什么。用例图为设计活动不仅记录需求
而且还提供了一种挖掘的信息, 它记录了需求到设计结果之间的映射关系,能够确保设计结果具有明确的根据或者说具有可
维护性,基于UML的软件开发过程是以用例驱动的。</p>




<p>首先我们进行角色识别，角色识别的任务是找出所有可能与系统发生交互行为的外部实体、对象、系统。它们的行为不受系统控制，
但是可以提供输入给系统。对于一所大学的图书管理系统，基本的功能是完成图书的借阅和相关信息的管理，服务的对象有本科生，
研究生，教师，及其他学校的学生，还有社会人员，这些人可归结为一类即读者。而为帮助读者顺利完成借还书的可以是工作人员，
可以是自动借还书机，他们可以归结为一类即图书管理人员。因此对于一个图书管理系统主要有两类角色，读者、图书管理员。</p>


<!--more-->




<p>其次，在主要角色的基础上，可以识别出与角色相应的用例，从而得到系统的用例模型。与读者相关的过程包括：借书、还书、
预定、图书信息检索、借阅查询(如查询本人借书记录、还书期限、是否超期)、个人相关信息查询及修改(如学号、姓名、性别、
年级、专业、家庭住址、联系电话、出生日期、民族、政治面貌、身份证号等)。与图书管理员相关的过程包括：办理借书、办理
还书、解除预定、图书订购、读者信息管理（增加/删除读者、修改读者权限及密码、借阅超期罚款）、图书信息管理（增加/删除
数目、图书类别等相关信息的修改、流通情况）。系统管理（系统的登陆、退出、日志维护、系统更新）。以上分析中，与读者，
图书管理员相关的过程构成了本系统的基本用例。</p>




<h2>2.系统的整体结构</h2>


<p>综上所述一个图书管理系统的整体结构可以分为三大模块：图书管理模块、读者管理模块、系统管理模块。</p>




<p>（1）图书管理模块包括与图书相关的一些过程，主要有图书的借出、图书的归还、预定、图书信息检索、图书订购、图书相关信息管理。</p>




<p>（2）读者管理模块主要包括与读者有联系相关的过程，主要有增加/删除读者、修改读者权限及密码、借阅信息查询、
个人信息查询及修该、借阅超期和丢失罚款。</p>




<p>（3）系统管理模块包括系统的登陆、退出、系统维护、系统更新。</p>




<p>综上我们画出系统的整体结构，如图一所示：</br>
<center><img src="/images/2010/IMAG2010071801.jpg"></center>
<center>图一 图书管理系统的整体结构</center>
</p>




<h2>3.系统的整体结构</h2>


<p>从以上分析中我们不难得出系统的基本用例图，如图二所示：</br>
<center><img src="/images/2010/IMAG2010071802.jpg"></center>
<center>图二 系统的基本用例图</center>
</p>




<p>图书管理和图书管理是图书管理系统的重要组成部分，为此我们按照前文所述将图书管理模块和读者模块以及系统管理模块详细
精化得出如下的用例图，如图三、图四、图五所示：</br>
<center><img src="/images/2010/IMAG2010071803.jpg"></center>
<center>图三 图书管理模块的用例图</center>
<center><img src="/images/2010/IMAG2010071804.jpg"></center>
<center>图四 读者管理用例图</center>
<center><img src="/images/2010/IMAG2010071805.jpg"></center>
<center>图五 系统管理模块的用例图</center>
</p>




<h2>4.图书管理系统的行为图</h2>


<p>我们再进行动态建模分析。对于图书管理系统借书还书是两个重要的过程，我们先来分析一下借书、还书的一般过程，并由借书的
一般过程画出其顺序图、协作图以及活动图。</p>




<p>（1）借书的过程：读者刷卡进入图书馆，或者先查询图书及个人借阅信息，或者直接去挑选图书，选择好图书后进入借书程序，管理员
先检查读者的借书证件，查验能否借阅，比如：证件是否无效或书籍是否已经借满等，即检验其借书的合法性和有效性，如果是非法用户
或借书数量范围外，则该读者不能借阅图书。如果满足借阅要求，则再获取所借书的标题以进行库内搜索，获取书目查询此书的数量，
看是否还有此书，如果没有则阻止其他借书者可能进行的预订活动，将此书借出，根据书号将此书的借阅标志位取反以表示此书已借出，
并将此书的书目减1。并为此读者记录借阅日期，以及归还日期，在归还日期内未能归还和续借的，并为其记录超借天数及罚款数额。</p>




<p>（2）还书过程：在返还图书的过程中，管理员首先获取读者的借阅信息和被归还的书籍的信息，如书标题信息，数量等，并一一审核
每本书的归还日期是否超过应归还日期。在完成阶段，将此书的书号登记并设计标志位为已归还，以便读者网上预订和继续借阅，同时
将此类图书的数量加1，如果读者超期或丢失所借书籍，则要进行赔偿处理。</p>




<p>所以我们不难画出借书一般过程的顺序图，如图六所示：</br>
<center><img src="/images/2010/IMAG2010071806.jpg"></center>
<center>图六 借书一般过程的顺序图</center>
</p>




<p>由顺序图可得到协作图，如图七所示。仔细分析借书过程的细节，可以画出如图八所示的活动图，它表示了复杂算法的过程，尤其是
过程中的判断、并发和同步。</br>
<center><img src="/images/2010/IMAG2010071807.jpg"></center>
<center>图七 借书一般过程的协作图</center>
<center><img src="/images/2010/IMAG2010071808.jpg"></center>
<center>图七 借书一般过程的活动图</center>
</p>




<p>以上我们用多种语言机制分析了读者的主要相关事件流，下面我们绘制图书管理员使用系统的状态图分析图书管理员的主要事件流。
从以上分析可知，图书管理员相关的过程包括：办理借书、办理还书、解除预定、图书订购、读者信息管理（增加/删除读者、修改
读者权限及密码、借阅超期罚款）、图书信息管理（增加/删除数目、图书类别等相关信息的修改、流通情况）。由此我们可绘制如
图九所示的图书管理员使用系统的状态图：</br>
<center><img src="/images/2010/IMAG2010071809.jpg"></center>
<center>图九 图书管理员使用系统的状态图</center>
</p>




<h2>5 图书管理系统的静态图</h2>


<p>定义并描述了各个类后，我们可以根据实际情况引入包来管理类，本图书馆管理系统可以划分为四个包：用户管理：对系统用户
进行管理，为用户提供信息服务接口，便于对系统进行操作。借阅管理包括借书处理，还书处理和罚款处理等。读者管理包括对读者
图书等信息进行维护，主要有读者信息的增删，对图书更新资料进行维护。系统服务：包括系统登录检查，安全维护等。系统的包图
如图十所示：</br>
<center><img src="/images/2010/IMAG2010071810.jpg"></center>
<center>图十 系统包图</center>
</p>




<h2>6 图书管理系统的实现</h2>


<p>经过系统分析和设计后，就可以根据设计模型在具体的环境中实现系统，生成系统的源代码、可执行程序和相应的软件文档，建立
一个可执行系统。进而需要对系统进行测试和排错，保证系统符合预定的要求，获得一个无错的系统实现。测试结果将确认所完成的
系统可以真正使用。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sql Server数据库常用的查询语句]]></title>
    <link href="http://ibillxia.github.io/blog/2009/07/23/useful-queries-methods-in-MS-SQL-Server/"/>
    <updated>2009-07-23T22:31:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2009/07/23/useful-queries-methods-in-MS-SQL-Server</id>
    <content type="html"><![CDATA[<h2>一、表操作</h2>

<p>例 1 对于表的教学管理数据库中的表 STUDENTS ，可以定义如下：
<code>
Create TABLE STUDENTS (SNO NUMERIC (6, 0) NOT NULL
SNAME CHAR (8) NOT NULL
AGE NUMERIC(3,0)
SEX CHAR(2)
BPLACE CHAR(20)
PRIMARY KEY(SNO))
</code></p>

<p>例 2 对于表的教学管理数据库中的表 ENROLLS ，可以定义如下：
<code>
Create TABLE ENROLLS(SNO NUMERIC(6,0) NOT NULL
CNO CHAR(4) NOT NULL
GRADE INT
PRIMARY KEY(SNO,CNO)
FOREIGN KEY(SNO) REFERENCES STUDENTS(SNO)
FOREIGN KEY(CNO) REFERENCES COURSES(CNO)
CHECK ((GRADE IS NULL) or (GRADE BETWEEN 0 AND 100)))
</code></p>

<!--more-->


<p>例 3 根据表的 STUDENTS 表，建立一个只包含学号、姓名、年龄的女学生表。
<code>
Create TABLE GIRL AS Select SNO, SNAME, AGE
FROM STUDENTS Where SEX=' 女 ';
</code></p>

<p>例 4 删除教师表 TEACHER 。
<code>
Drop TABLE TEACHER
</code></p>

<p>例 5 在教师表中增加住址列。
<code>
Alter TABLE TEACHERS ADD (ADDR CHAR(50))
</code></p>

<p>例 6 把 STUDENTS 表中的 BPLACE 列删除，并且把引用 BPLACE 列的所有视图和约束也一起删除。
<code>
Alter TABLE STUDENTS Drop BPLACE CASCADE
</code></p>

<p>例 7 补充定义 ENROLLS 表的主关键字。
<code>
Alter TABLE ENROLLS ADD PRIMARY KEY (SNO,CNO) ;
</code></p>

<h2>二、视图操作（虚表）</h2>

<p>例 9 建立一个只包括教师号、姓名和年龄的视图 FACULTY 。 ( 在视图定义中不能包含 orDER BY 子句 )
<code>
Create VIEW FACULTY AS Select TNO, TNAME, AGE FROM TEACHERS
</code></p>

<p>例 10 从学生表、课程表和选课表中产生一个视图 <code>GRADE_TABLE</code> ， 它包括学生姓名、课程名和成绩。
<code>
Create VIEW GRADE_TABLE AS Select SNAME,CNAME,GRADE
FROM STUDENTS,COURSES,ENROLLS
Where STUDENTS.SNO ＝ ENROLLS.SNO AND
COURSES.CNO=ENROLLS.CNO
</code></p>

<p>例 11 删除视图 <code>GRADE_TABLE</code>
<code>
Drop VIEW GRADE_TABLE RESTRICT
</code></p>

<h2>三、索引操作</h2>

<p>例 12 在学生表中按学号建立索引。
<code>
Create UNIQUE INDEX ST ON STUDENTS (SNO,ASC)
</code></p>

<p>例 13 删除按学号所建立的索引。
<code>
Drop INDEX ST
</code></p>

<h2>四、数据库模式操作</h2>

<p>例 14 创建一个简易教学数据库的数据库模式 <code>TEACHING_DB</code> ，属主为 <code>ZHANG</code> 。
<code>
Create SCHEMA TEACHING_DB AUTHRIZATION ZHANG
</code></p>

<p>例 15 删除简易教学数据库模式 <code>TEACHING_DB</code> 。<br/>
(1)选用 CASCADE ，即当删除数据库模式时，则本数据库模式和其下属的基本表、视图、索引等全部被删除。<br/>
(2 )选用 RESTRICT ，即本数据库模式下属的基本表、视图、索引等事先已清除，才能删除本数据库模式，否则拒绝删除。
<code>
Drop SCHEMA TEACHING_DB CASCADE
</code></p>

<h2>五、单表操作</h2>

<p>例 16 找出 3 个学分的课程号和课程名。
<code>
Select CNO, CNAME  FROM  COURSES  Where  CREDIT= 3
</code></p>

<p>例 17 查询年龄大于 22 岁的学生情况。
<code>
Select * FROM STUDENTS Where AGE ＞ 22
</code></p>

<p>例 18 找出籍贯为河北的男生的姓名和年龄。
<code>
Select  SNAME, AGE  FROM  STUDENTS
Where  BPLACE ＝ ' 河北 ' AND SEX ＝ ' 男 '
</code></p>

<p>例 19 找出年龄在 20 ～ 23 岁之间的学生的学号、姓名和年龄，并按年龄升序排序。 (ASC （升序）或 DESC （降序）声明排序的方式，缺省为升序。 )
<code>
Select SNO, SNAME, AGE  FROM  STUDENTS
Where  AGE  BETWEEN  20  AND  23
orDER BY AGE
</code></p>

<p>例 20 找出年龄小于 23 岁、籍贯是湖南或湖北的学生的姓名和性别。（条件比较运算符＝、＜ 和逻辑运算符 AND （与），此外还可以使用的
运算符有：＞（大于）、＞＝（大于等于）、＜＝（小于等于）、＜＞（不等于）、 NOT （非）、 or （或）等。 <br/>
谓词 LIKE 只能与字符串联用，常常是 <code>＜列名＞ LIKE pattern</code> 的格式。特殊字符 <code>“_”</code>和 <code>“%”</code> 作为通配符。 <br/>
谓词 IN 表示指定的属性应与后面的集合（括号中的值集或某个查询子句的结果）中的某个值相匹配，实际上是一系列的 or （或）的缩写。<br/>
谓词 NOT IN 表示指定的属性不与后面的集合中的某个值相匹配。 </br>
谓词 BETWEEN 是 “ 包含于 … 之中 ” 的意思。）
<code>
Select SNAME, SEX FROM STUDENTS
Where AGE ＜ 23 AND BPLACE LIKE' 湖％ '
</code>
或
<code>
Select SNAME, SEX FROM STUDENTS
Where AGE ＜ 23 AND BPLACE IN （ ' 湖南 ' ， ' 湖北 ' ）
</code></p>

<p> 例 21 找出学生表中籍贯是空值的学生的姓名和性别。（在 SQL 中不能使用条件：＜列名＞＝ NULL 。在 SQL 中只有一个特殊的查询条件允许查询 NULL 值：）
<code>
Select SNAME, SEX FROM STUDENTS Where BPLACE IS NULL
</code></p>

<h2>六、多表操作</h2>

<p>例 22 找出成绩为 95 分的学生的姓名。（子查询）
<code>
Select SNAME FROM STUDENTS
Where 　 SNO ＝
(Select SNO FROM ENROLLS Where GRADE ＝ 95)
</code></p>

<p>例 23 找出成绩在 90 分以上的学生的姓名。
<code>
Select SNAME FROM STUDENTS
Where SNO IN
(Select SNO FROM ENROLLS Where GRADE ＞ 90)
</code>
或
<code>
Select SNAME FROM STUDENTS
Where SNO ＝ ANY
(Select SNO FROM ENROLLS Where GRADE ＞ 90)
</code></p>

<p>例 24 查询全部学生的学生名和所学课程号及成绩。（连接查询）
<code>
Select SNAME, CNO, GRADE FROM STUDENTS, ENROLLS
Where STUDENTS.SNO ＝ ENROLLS.SNO
</code></p>

<p>例 25 找出籍贯为山西或河北，成绩为 90 分以上的学生的姓名、籍贯和成绩。<br/>
【当构造多表连接查询命令时，必须遵循两条规则。<br/>
第一，连接条件数正好比表数少 1 （若有三个表，就有两个连接条件 ) ；<br/>
第二，若一个表中的主关键字是由多个列组成，则对此主关键字中的每一个列都要有一个连接条件（也有少数例外情况）.】
<code>
Select SNAME, BPLACE, GRADE FROM STUDENTS, ENROLLS
Where BPLACE IN (‘ 山西 ' ， ‘ 河北 ') AND GRADE ＞＝ 90 AND 　 STUDENTS.SNO=ENROLLS.SNO
</code></p>

<p>例 26 查出课程成绩在 80 分以上的女学生的姓名、课程名和成绩。（ FROM 子句中的子查询）
<code>
Select SNAME,CNAME, GRADE FROM (Select SNAME, CNAME , GRADE
FROM STUDENTS, ENROLLS,COURSES Where SEX ＝'女')
AS TEMP (SNAME, CNAME,GRADE) Where GRADE ＞ 80
</code></p>

<h4>表达式与函数的使用</h4>

<p>例 27 查询各课程的学时数。（算术表达式由算术运算符＋、－、 * 、／与列名或数值常量所组成。）
<code>
Select CNAME,COURSE_TIME ＝ CREDIT*16 FROM COURSES
</code></p>

<p>例 28 找出教师的最小年龄。【内部函数： SQL 标准中只使用 COUNT 、 SUM 、 AVG 、 MAX 、 MIN 函数，
称之为聚集函数（ Set Function ）。 COUNT 函数的结果是该列统计值的总数目， SUM 函数求该列统计值之和，
AVG 函数求该列统计值之平均值， MAX 函数求该列最大值， MIN 函数求该列最小值。】
<code>
Select MIN(AGE) FROM TEACHERS
</code></p>

<p><p>例 29 统计年龄小于等于 22 岁的学生人数。（统计）
<code>
Select COUNT(*) FROM STUDENTS Where AGE &lt; ＝ 22
</code></p>

<p>例 30 找出学生的平均成绩和所学课程门数。
<code>
Select SNO, AVG(GRADE), COURSES ＝ COUNT(*) FROM ENROLLS GROUP BY SNO
</code></p>

<p>例 31 找出年龄超过平均年龄的学生姓名。
<code>
Select SNAME FROM STUDENTS
Where AGE ＞ (Select AVG(AGE) FROM STUDENTS)
</code></p>

<p>例 32 找出各课程的平均成绩，按课程号分组，且只选择学生超过 3 人的课程的成绩。【 GROUP BY 与 HAVING  GROUP BY 子句
把一个表按某一指定列（或一些列）上的值相等的原则分组，然后再对每组数据进行规定的操作。 GROUP BY 子句总是跟在 Where 子句
后面，当 Where 子句缺省时，它跟在 FROM 子句后面。 HAVING 子句常用于在计算出聚集之后对行的查询进行控制。】
<code>
Select CNO, AVG(GRADE), STUDENTS ＝ COUNT(*) FROM ENROLLS  GROUP BY CNO HAVING COUNT(*) &gt;= 3
</code></p>

<h2>七、相关子查询</h2>

<p>例 33 查询没有选任何课程的学生的学号和姓名。【当一个子查询涉及到一个来自外部查询的列时，称为相关子查询（ Correlated Subquery) 。
相关子查询要用到存在测试谓词 EXISTS 和 NOT EXISTS ，以及 ALL 、 ANY （ SOME ）等 。】
<code>
Select SNO, SNAME FROM STUDENTS Where NOT EXISTS
(Select * FROM ENROLLS Where ENROLLS.SNO=STUDENTS.SNO)
</code></p>

<p>例 34 查询哪些课程只有男生选读。
<code>
Select DISTINCT CNAME FROM COURSES C
Where ' 男 ' ＝ ALL
(Select SEX FROM ENROLLS , STUDENTS Where ENROLLS.SNO=STUDENTS.SNO AND ENROLLS.CNO=C.CNO)
</code></p>

<p>例 35 要求给出一张学生、籍贯列表，该表中的学生的籍贯省份，也是其他一些学生的籍贯省份。
<code>
Select SNAME, BPLACE FROM STUDENTS A Where EXISTS
(Select * FROM STUDENTS B Where A.BPLACE=B.BPLACE AND A.SNO &lt; &gt; B.SNO)
</code></p>

<p>例 36 找出选修了全部课程的学生的姓名。本查询可以改为：查询这样一些学生，没有一门课程是他不选修的。
<code>
Select SNAME FROM STUDENTS Where NOT EXISTS
(Select * FROM COURSES Where NOT EXISTS
(Select * FROM ENROLLS Where ENROLLS.SNO ＝ STUDENTS.SNO AND ENROLLS.CNO=
</code></p>

<h4>关系代数运算</h4>

<p>例 37 设有某商场工作人员的两张表：营业员表 SP_SUBORD 和营销经理表 SP_MGR ，其关系数据模式如下：
<code>
SP_SUBORD (SALPERS_ID, SALPERS_NAME, MANAGER_ID, OFFICE)
SP_MGR (SALPERS_ID, SALPERS_NAME, MANAGER_ID, OFFICE)
</code>
其中，属性 SALPERS_ID 为工作人员的编号 , SALPERS_NAME 为工作人员的姓名 , <code>MANAGER_ID</code> 为所在部门经理的编号 , <code>OFFICE</code> 为工作地点。
(1) 若查询全部商场工作人员，可以用下面的 SQL 语句：<br/>
<code>
(Select * FROM SP_SUBORD) UNION (Select * FROM SP_MGR)
</code>
或等价地用下面的 SQL 语句：<br/>
<code>
Select * FROM (TABLE SP_SUBORD UNION TABLE SP_MGR)
</code>
(2) <code>INTERSECT (Select * FROM SP_SUBORD)</code><br/>
<code>
INTERSECT (Select * FROM SP_MGR)
</code>
或等价地用下面的 SQL 语句：
<code>
Select * FROM (TABLE SP_SUBORD INTERSECT TABLE SP_MGR)
</code>
或用带 ALL 的 SQL 语句：
<code>
(Select * FROM SP_SUBORD) INTERSECT ALL (Select * FROM SP_MGR)
</code>
或
<code>
Select * FROM (TABLE SP_SUBORD INTERSECT ALL TABLE SP_MGR)
</code>
(3) <code>EXCEPT (Select * FROM SP_MGR)</code>
<code>
EXCEPT (Select * FROM SP_SUBORD)
</code>
或等价地用下面的 SQL 语句：
<code>
Select * FROM (TABLE SP_MGR EXCEPT TABLE SP_ SUBORD)
</code>
或用带 ALL 的 SQL 语句：
<code>
(Select * FROM SP_MGR) EXCEPT ALL (Select * FROM SP_SUBORD)
</code></p>

<p>例 38 查询籍贯为四川、课程成绩在 80 分以上的学生信息及其成绩。（自然连接）
<code>
(Select * FROM STUDENTS Where BPLACE=‘ 四川 ') NATURAL JOIN
(Select * FROM ENROLLS Where GRADE &gt;=80)
</code></p>

<p>例39 列出全部教师的姓名及其任课的课程号、班级。【外连接与外部并外连接允许在结果表中保留非匹配元组，空缺部分填以 NULL 。
外连接的作用是在做连接操作时避免丢失信息。 外连接有 3 类： <br/>
(1)左外连接（ Left Outer Join ）:连接运算谓词为 LEFT [OUTER] JOIN ，其结果表中保留左关系的所有元组。 <br/>
(2)右外连接（ Right Outer Join ）:连接运算谓词为 RIGHT [OUTER] JOIN ，其结果表中保留右关系的所有元组。 <br/>
(3)全外连接（ Full Outer Join ）:连接运算谓词为 FULL [OUTER] JOIN ，其结果表中保留左右两关系的所有元组。】
<code>
Select TNAME, CNO, CLASS FROM TEACHERS LEFT OUTER JOIN TEACHING USING (TNO)
</code></p>

<h2>八、SQL 的数据操纵</h2>

<p>例 40 把教师李映雪的记录加入到教师表 TEACHERS 中。（插入）
<code>
Insert INTO TEACHERS VALUES(1476 ， ' 李映雪 ' ， 44 ， ' 副教授 ')
</code></p>

<p>例 41 成绩优秀的学生将留下当教师。
<code>
Insert INTO TEACHERS (TNO ， TNAME) Select DISTINCT SNO ， SNAME FROM STUDENTS ， ENROLLS
Where STUDENTS.SNO＝ENROLLS.SNO AND GRADE ＞＝ 90
</code></p>

<p>例 42 把所有学生的年龄增加一岁。（修改）
<code>
Update STUDENTS SET AGE ＝ AGE+1
</code></p>

<p>例 43 学生张春明在数据库课考试中作弊，该课成绩应作零分计。
<code>
Update ENROLLS SET GRADE ＝ 0 Where CNO ＝ 'C1' AND
' 张春明 ' ＝ (Select SNAME FROM STUDENTS Where STUDENTS.SNO=ENROLLS.SNO)
</code></p>

<p>例 49 从教师表中删除年龄已到 60 岁的退休教师的数据。（删除）
<code>
Delete FROM TEACHERS Where AGE ＞＝ 60
</code></p>

<h2>九、SQL 的数据控制</h2>

<p>例 50 授予 LILI 有对表 STUDENTS 的查询权。（表／视图特权的授予 一个 SQL 特权允许一个被授权者在给定的数据库对象上进行特定的操作。
授权操作的数据库对象包括：表 / 视图、列、域等。授权的操作包括： Insert 、 Update 、 Delete 、 Select 、 REFERENCES 、 TRIGGER 、
UNDER 、 USAGE 、 EXECUTE 等。其中 Insert 、 Update 、 Delete 、 Select 、 REFERENCES 、 TRIGGER 有对表做相应操作的权限，故称为表特权。）
<code>
GRANT Select ON STUDENTS TO LILI WITH GRANT OPTION
</code></p>

<p>例 51 取消 LILI 的存取 STUDENTS 表的特权。
<code>
REVOKE ALL ON STUDENTS FROM LILI CASCADE
</code></p>

<p>本文来自: 脚本之家<a href="http://www.jb51.net/article/8863_3.htm">www.jb51.net</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sql Server数据库常用的命令语句]]></title>
    <link href="http://ibillxia.github.io/blog/2009/07/20/useful-commands-in-MS-SQL-Server/"/>
    <updated>2009-07-20T14:44:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2009/07/20/useful-commands-in-MS-SQL-Server</id>
    <content type="html"><![CDATA[<p><strong>1. 查看数据库的版本</strong> <br/>
<code>
select @@version
</code></p>

<p><strong>2. 查看数据库所在机器操作系统参数</strong>
<code>
exec master..xp_msver
</code></p>

<p><strong>3. 查看数据库启动的参数</strong><br/>
<code>
sp_configure
</code></p>

<p><strong>4. 查看数据库启动时间</strong><br/>
<code>
select convert(varchar(30),login_time,120) from   master..sysprocesses where spid=1
</code>
查看数据库服务器名和实例名</p>

<pre><code>print 'Server Name...............: ' + convert(varchar(30),@@SERVERNAME) 
print 'Instance..................: ' + convert(varchar(30),@@SERVICENAME)
</code></pre>



<!--more-->


<p><strong>5. 查看所有数据库名称及大小</strong><br/>
<code>
sp_helpdb
</code><br/>
重命名数据库用的SQL<br/>
<code>
sp_renamedb 'old_dbname', 'new_dbname'
</code></p>

<p><strong>6. 查看所有数据库用户登录信息</strong><br/>
<code>
sp_helplogins
</code><br/>
查看所有数据库用户所属的角色信息
<code>
sp_helpsrvrolemember
</code><br/>
修复迁移服务器时孤立用户时,可以用的 <code>fix_orphan_user</code> 脚本或者 <code>LoneUser</code> 过程<br/>
更改某个数据对象的用户属主<br/>
<code>
sp_changeobjectowner [@objectname =] 'object', [@newowner =] 'owner'
</code>
注意: 更改对象名的任一部分都可能破坏脚本和存储过程。
把一台服务器上的数据库用户登录信息备份出来可以用 <code>add_login_to_aserver</code> 脚本</p></p>

<p><strong>7. 查看链接服务器</strong><br/>
<code>
sp_helplinkedsrvlogin
</code>
查看远端数据库用户登录信息<br/>
<code>
sp_helpremotelogin
</code></p>

<p><strong>8.查看某数据库下某个数据对象的大小</strong><br/>
<code>
sp_spaceused @objname
</code>
还可以用 <code>sp_toptables</code> 过程看最大的N(默认为50)个表<br/>
查看某数据库下某个数据对象的索引信息<br/>
<code>
sp_helpindex @objname
</code>
还可以用 <code>SP_NChelpindex</code> 过程查看更详细的索引情况<br/>
<code>
SP_NChelpindex @objname
</code>
<code>clustered</code> 索引是把记录按物理顺序排列的，索引占的空间比较少。</p>

<p>对键值DML操作十分频繁的表我建议用非 <code>clustered</code> 索引和约束，<code>fillfactor</code> 参数都用默认值。<br/>
查看某数据库下某个数据对象的的约束信息<br/>
<code>
sp_helpconstraint @objname
</code></p>

<p><strong>9.查看数据库里所有的存储过程和函数</strong><br/>
<code>
use @database_name
sp_stored_procedures
</code>
查看存储过程和函数的源代码<br/>
<code>
sp_helptext '@procedure_name'
</code>
查看包含某个字符串@str的数据对象名称<br/>
<code>
select distinct object_name(id) from syscomments where text like '%@str%'
</code>
创建加密的存储过程或函数在AS前面加WITH ENCRYPTION参数<br/>
解密加密过的存储过程和函数可以用 <code>sp_decrypt</code> 过程</p>

<p><strong>10.查看数据库里用户和进程的信息</strong><br/>
<code>
sp_who
</code>
查看SQL Server数据库里的活动用户和进程的信息<br/>
<code>
sp_who 'active'
</code>
查看SQL Server数据库里的锁的情况<br/>
<code>
sp_lock
</code>
进程号1--50是SQL Server系统内部用的,进程号大于50的才是用户的连接进程.<br/>
spid是进程编号,dbid是数据库编号,objid是数据对象编号<br/>
查看进程正在执行的SQL语句<br/>
<code>
dbcc inputbuffer ()  
</code>
推荐大家用经过改进后的 <code>sp_who3</code> 过程可以直接看到进程运行的SQL语句<br/>
<code>
sp_who3  
</code>
检查死锁用 <code>sp_who_lock</code> 过程<br/>
<code>
sp_who_lock
</code></p>

<p><strong>11.收缩数据库日志文件的方法</strong><br/>
收缩简单恢复模式数据库日志，收缩后 <code>@database_name_log</code> 的大小单位为M<br/>
<code>
backup log @database_name with no_log
dbcc shrinkfile (@database_name_log, 5)
</code></p>

<p><strong>12.分析SQL Server SQL 语句的方法</strong> <br/>
<code>
set statistics time {on | off}
set statistics io {on | off}
</code>
图形方式显示查询执行计划<br/>
在查询分析器->查询->显示估计的评估计划(D)-Ctrl-L 或者点击工具栏里的图形 <br/>
文本方式显示查询执行计划<br/>
<code>
set showplan_all {on | off}
set showplan_text { on | off }
set statistics profile { on | off }
</code></p>

<p><strong>13.出现不一致错误时，NT事件查看器里出3624号错误，修复数据库的方法</strong>
先注释掉应用程序里引用的出现不一致性错误的表，然后在备份或其它机器上先恢复然后做修复操作<br/>
<code>
alter database [@error_database_name] set single_user
</code>
修复出现不一致错误的表
<code>
dbcc checktable('@error_table_name',repair_allow_data_loss)
</code>
或者可惜选择修复出现不一致错误的小型数据库名<br/>
<code>
dbcc checkdb('@error_database_name',repair_allow_data_loss)
alter database [@error_database_name] set multi_user
</code>
CHECKDB 有3个参数: <br/>
<code>repair_allow_data_loss</code> 包括对行和页进行分配和取消分配以改正分配错误、结构行或页的错误，以及删除已损坏的文本对象，这些修复可能会导致一些数据丢失。修复操作可以在用户事务下完成以允许用户回滚所做的更改。如果回滚修复，则数据库仍会含有错误，应该从备份进行恢复。如果由于所提供修复等级的缘故遗漏某个错误的修复，则将遗漏任何取决于该修复的修复。修复完成后，请备份数据库。<br/>
<code>repair_fast</code> 进行小的、不耗时的修复操作，如修复非聚集索引中的附加键。 这些修复可以很快完成，并且不会有丢失数据的危险。<br/>
<code>repair_rebuild</code> 执行由 <code>repair_fast</code> 完成的所有修复，包括需要较长时间的修复（如重建索引）。<br/>
执行这些修复时不会有丢失数据的危险。</p></p>
]]></content>
  </entry>
  
</feed>
