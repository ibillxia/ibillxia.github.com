<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 需求分析 | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/tags/xu-qiu-fen-xi/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2024-10-08T22:19:30+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[UML需求分析步骤实例解析]]></title>
    <link href="http://ibillxia.github.io/blog/2010/10/26/UML-model-building-example-for-requirement-analysis/"/>
    <updated>2010-10-26T13:08:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/10/26/UML-model-building-example-for-requirement-analysis</id>
    <content type="html"><![CDATA[<p>本节向大家介绍一下UML需求分析的一般步骤，本节用实例向大家介绍，相信通过本节的介绍你对UML需求分析有一定的认识。下面让我们一起来学习具体介绍吧。</p>


<h2>基于UML需求分析</h2>


<p>在初步的业务需求描述已经形成的前提下，基于UML需求分析大致可分为以下步骤：</br>
（1）利用用例及用例图表示需求。从业务需求描述出发获取执行者和场景；对场景进行汇总、分类、抽象；形成用例；确定执行者与用例、用例与用例图
之间的关系，生成用例图。</br>
（2）利用包图及类图表示目标软件系统的总体框架结构。根据领域知识、业务需求描述和既往经验设计目标软件系统的顶层架构；从业务需求描述中
提取“关键概念”，形成领域概念模型；从概念模型和用例出发，研究系统中主要的类之间的关系，生成类图。</br>
上述两个步骤并没有时序关系，它们可以并行展开，如图1所示。</br>
<center><img src="/images/2010/IMAG2010102601.jpg"></center>
</p>




<p>本节将依次介绍上述步骤中涉及的UML语言机制，并结合“家庭保安系统”实例说明每步骤中基于UML需求分析方法。</p>


<!--more-->




<h2>开发场景</h2>


<p>场景是指从单个执行者的角度观察目标软件系统的功能和外部行为。这种功能通过系统与用户之间的交互来表征。因此也可以说，场景是用户与系统之间
进行交互的一组具体的动作。相对于用例而言，场景是用例的实例，而用例是某类场景的共同抽象。</br>
对场景的完整描述应包含场景名称、执行者实例，前置条件、事件流和后置条件。</br>
例如，“家庭保安系统”的初步需求描述：“家庭保安系统”的软件允许用户在安装时进行系统配置，
实施对传感器的监控并通过控制面板与用户进行信息交互。</p>




<p>配置操作包括：</br>
（1）指定每一传感器的种类和编号；</br>
（2）设置开、关机密码；</br>
（3）指定报警电话电码；</br>
（4）指定报警延迟和电话重拨延迟时间（以秒为单位）；</br>
当软件系统收到传感器发出的数据后，判别是否出现异常事件。如果是，则在指定的延迟时间内拨报警电话号码，拨号操作将按照重拨延迟反复进行，
直至电话接通。然后软件系统负责报告时间、地点和异常事件的性质。</p>




<p>开机后，软件系统负责显示当前工作状态，接收并处理用户指令。</p>




<p>根据以上描述，该系统具有“系统配置”、“开机”、“关机”、“门窗监测”、“烟雾监测”和“复位”等场景。其中，门窗监测场景的具体描述如下：</br>
场景名称：门窗监测。</br>
参与执行者实例：警报器、报警电话、显示器和门窗监视器。</br>
前置条件：系统已开机。</br>
事件流：</br>
（1）门窗监视器发现门或窗户发生异动，向软件系统报告异常事件。</br>
（2）软件系统启动警报器并拨报警电话号码。</br>
（3）报警电话接通后，软件系统播出语音，报告异常事件发生的时间、地点和事件的性质（门窗异动）。</br>
（4）系统在控制面板的显示器上显示报警时间及当前状态（报警：门窗异动）。</br>
后置条件：系统处于“报警”状态。</p>




<p>UML需求分析过程中根据场景作用的不同，可以将其划分为以下类型：</br>
（1）实际场景。对实际的业务处理流程或其优化流程的描述。实际场景是用户需求的重要组成部分。</br>
（2）设想场景。分析人员对目标软件系统投入应用后经改进或优化的业务流程的描述。这种场景可视为一种纸面原型，主要用于帮助分析人员挖掘潜在的用户需求。</br>
（3）评价场景。以确认需求或提出改进建议为主要目的的业务流程描述。评价场景可以在用例生成后用例进行实例化而形成，以便用户对用例进行评价或改进。</br>
（4）培训场景。面向开发人员及用户解释系统的功能和外部行为的业务流程描述。</p>




<p>对以下问题的回答有助于分析人员进行UML需求分析获取场景：</br>
（1）目标软件系统有哪些执行者？</br>
（2）执行者希望系统执行哪些任务？</br>
（3）执行者希望获得哪些信息？这些信息由谁生成？由谁修改？</br>
（4）执行者需要通知系统哪些事件？系统响应这些事件时会表现出哪些外部行为？</br>
（5）系统将通告执行者哪些事件？</br>
总之，确定执行者和场景的关键在于理解业务领域和初步需求描述文档。场景将促成开发人员和用户对业务处理流程和目标软件系统的功能范围的共同理解。
在场景确定之后，通过对场景的汇总、分类归并和抽象即可形成用例。本节关于UML需求分析相关内容介绍到这里。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于UML的图书管理系统的需求分析]]></title>
    <link href="http://ibillxia.github.io/blog/2010/07/18/UML-based-library-management-system-requirement-analysis-and-system-design/"/>
    <updated>2010-07-18T10:06:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/07/18/UML-based-library-management-system-requirement-analysis-and-system-design</id>
    <content type="html"><![CDATA[<p>一个图书馆的图书资料库在正常运转中总是面对大量的读者信息、书籍信息以及两者相互作用产生的借书信息、还书信息。
图书馆作为一个信息资源的集散地，图书和用户借阅资料繁多，包含着很多的信息数据。图书管理系统的开发和应用主要通过
两个步骤来实现：首先是基于系统功能的需求分析，其次是系统模型的设计和实现。
</p>




<h2>1.需求分析</h2>


<p>需求分析是软件工程过程的一个重要阶段,其中一个主要任务是确定系统的功能需求,采用面向对象方法,基于UML的可视化
系统需求分析,因为有用户的积极参与,既可以加快设计者对于问题的理解,又能够在系统描述方面减少语义差异,保证分析的
正确性。需求分析的目标就是建立需求模型,即从功能需求出发建立用例模型, UML的用例视图从用户的需求中提取,以盒图的
方式描述待开发的系统的功能需求。每个用例都指定了客户的需求即他们需要系统干什么。用例图为设计活动不仅记录需求
而且还提供了一种挖掘的信息, 它记录了需求到设计结果之间的映射关系,能够确保设计结果具有明确的根据或者说具有可
维护性,基于UML的软件开发过程是以用例驱动的。</p>




<p>首先我们进行角色识别，角色识别的任务是找出所有可能与系统发生交互行为的外部实体、对象、系统。它们的行为不受系统控制，
但是可以提供输入给系统。对于一所大学的图书管理系统，基本的功能是完成图书的借阅和相关信息的管理，服务的对象有本科生，
研究生，教师，及其他学校的学生，还有社会人员，这些人可归结为一类即读者。而为帮助读者顺利完成借还书的可以是工作人员，
可以是自动借还书机，他们可以归结为一类即图书管理人员。因此对于一个图书管理系统主要有两类角色，读者、图书管理员。</p>


<!--more-->




<p>其次，在主要角色的基础上，可以识别出与角色相应的用例，从而得到系统的用例模型。与读者相关的过程包括：借书、还书、
预定、图书信息检索、借阅查询(如查询本人借书记录、还书期限、是否超期)、个人相关信息查询及修改(如学号、姓名、性别、
年级、专业、家庭住址、联系电话、出生日期、民族、政治面貌、身份证号等)。与图书管理员相关的过程包括：办理借书、办理
还书、解除预定、图书订购、读者信息管理（增加/删除读者、修改读者权限及密码、借阅超期罚款）、图书信息管理（增加/删除
数目、图书类别等相关信息的修改、流通情况）。系统管理（系统的登陆、退出、日志维护、系统更新）。以上分析中，与读者，
图书管理员相关的过程构成了本系统的基本用例。</p>




<h2>2.系统的整体结构</h2>


<p>综上所述一个图书管理系统的整体结构可以分为三大模块：图书管理模块、读者管理模块、系统管理模块。</p>




<p>（1）图书管理模块包括与图书相关的一些过程，主要有图书的借出、图书的归还、预定、图书信息检索、图书订购、图书相关信息管理。</p>




<p>（2）读者管理模块主要包括与读者有联系相关的过程，主要有增加/删除读者、修改读者权限及密码、借阅信息查询、
个人信息查询及修该、借阅超期和丢失罚款。</p>




<p>（3）系统管理模块包括系统的登陆、退出、系统维护、系统更新。</p>




<p>综上我们画出系统的整体结构，如图一所示：</br>
<center><img src="/images/2010/IMAG2010071801.jpg"></center>
<center>图一 图书管理系统的整体结构</center>
</p>




<h2>3.系统的整体结构</h2>


<p>从以上分析中我们不难得出系统的基本用例图，如图二所示：</br>
<center><img src="/images/2010/IMAG2010071802.jpg"></center>
<center>图二 系统的基本用例图</center>
</p>




<p>图书管理和图书管理是图书管理系统的重要组成部分，为此我们按照前文所述将图书管理模块和读者模块以及系统管理模块详细
精化得出如下的用例图，如图三、图四、图五所示：</br>
<center><img src="/images/2010/IMAG2010071803.jpg"></center>
<center>图三 图书管理模块的用例图</center>
<center><img src="/images/2010/IMAG2010071804.jpg"></center>
<center>图四 读者管理用例图</center>
<center><img src="/images/2010/IMAG2010071805.jpg"></center>
<center>图五 系统管理模块的用例图</center>
</p>




<h2>4.图书管理系统的行为图</h2>


<p>我们再进行动态建模分析。对于图书管理系统借书还书是两个重要的过程，我们先来分析一下借书、还书的一般过程，并由借书的
一般过程画出其顺序图、协作图以及活动图。</p>




<p>（1）借书的过程：读者刷卡进入图书馆，或者先查询图书及个人借阅信息，或者直接去挑选图书，选择好图书后进入借书程序，管理员
先检查读者的借书证件，查验能否借阅，比如：证件是否无效或书籍是否已经借满等，即检验其借书的合法性和有效性，如果是非法用户
或借书数量范围外，则该读者不能借阅图书。如果满足借阅要求，则再获取所借书的标题以进行库内搜索，获取书目查询此书的数量，
看是否还有此书，如果没有则阻止其他借书者可能进行的预订活动，将此书借出，根据书号将此书的借阅标志位取反以表示此书已借出，
并将此书的书目减1。并为此读者记录借阅日期，以及归还日期，在归还日期内未能归还和续借的，并为其记录超借天数及罚款数额。</p>




<p>（2）还书过程：在返还图书的过程中，管理员首先获取读者的借阅信息和被归还的书籍的信息，如书标题信息，数量等，并一一审核
每本书的归还日期是否超过应归还日期。在完成阶段，将此书的书号登记并设计标志位为已归还，以便读者网上预订和继续借阅，同时
将此类图书的数量加1，如果读者超期或丢失所借书籍，则要进行赔偿处理。</p>




<p>所以我们不难画出借书一般过程的顺序图，如图六所示：</br>
<center><img src="/images/2010/IMAG2010071806.jpg"></center>
<center>图六 借书一般过程的顺序图</center>
</p>




<p>由顺序图可得到协作图，如图七所示。仔细分析借书过程的细节，可以画出如图八所示的活动图，它表示了复杂算法的过程，尤其是
过程中的判断、并发和同步。</br>
<center><img src="/images/2010/IMAG2010071807.jpg"></center>
<center>图七 借书一般过程的协作图</center>
<center><img src="/images/2010/IMAG2010071808.jpg"></center>
<center>图七 借书一般过程的活动图</center>
</p>




<p>以上我们用多种语言机制分析了读者的主要相关事件流，下面我们绘制图书管理员使用系统的状态图分析图书管理员的主要事件流。
从以上分析可知，图书管理员相关的过程包括：办理借书、办理还书、解除预定、图书订购、读者信息管理（增加/删除读者、修改
读者权限及密码、借阅超期罚款）、图书信息管理（增加/删除数目、图书类别等相关信息的修改、流通情况）。由此我们可绘制如
图九所示的图书管理员使用系统的状态图：</br>
<center><img src="/images/2010/IMAG2010071809.jpg"></center>
<center>图九 图书管理员使用系统的状态图</center>
</p>




<h2>5 图书管理系统的静态图</h2>


<p>定义并描述了各个类后，我们可以根据实际情况引入包来管理类，本图书馆管理系统可以划分为四个包：用户管理：对系统用户
进行管理，为用户提供信息服务接口，便于对系统进行操作。借阅管理包括借书处理，还书处理和罚款处理等。读者管理包括对读者
图书等信息进行维护，主要有读者信息的增删，对图书更新资料进行维护。系统服务：包括系统登录检查，安全维护等。系统的包图
如图十所示：</br>
<center><img src="/images/2010/IMAG2010071810.jpg"></center>
<center>图十 系统包图</center>
</p>




<h2>6 图书管理系统的实现</h2>


<p>经过系统分析和设计后，就可以根据设计模型在具体的环境中实现系统，生成系统的源代码、可执行程序和相应的软件文档，建立
一个可执行系统。进而需要对系统进行测试和排错，保证系统符合预定的要求，获得一个无错的系统实现。测试结果将确认所完成的
系统可以真正使用。</p>



]]></content>
  </entry>
  
</feed>