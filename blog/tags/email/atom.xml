<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Email | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/tags/email/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2024-10-08T22:34:18+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP发送邮件]]></title>
    <link href="http://ibillxia.github.io/blog/2010/07/21/php-send-email/"/>
    <updated>2010-07-21T10:05:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2010/07/21/php-send-email</id>
    <content type="html"><![CDATA[<p>现在很多主机空间都是IIS上执行PHP程序，大多不能直接用mail()发送邮件，有了这个类只要你有注册过邮箱，
就可以随意的发送邮件，速度也不慢哦。</p>




<p>先给一个具体的使用示例：</p>




<pre><code class="php">&lt;? 
require (FILE_DIR."smtp.php"); 
$smtpserver = "smtp.xxx.com";//SMTP服务器 
$smtpserverport =25;//SMTP服务器端口 
$smtpusermail = "xxxxx@xxx.com";//SMTP服务器的用户邮箱 
$smtpemailto = "aaaaa@xxx.com";//发送给谁 
$smtpuser = "xxxxx";//SMTP服务器的用户帐号 
$smtppass = "xxxxx";//SMTP服务器的用户密码 
$mailsubject = "Test Subject";//邮件主题 
$mailbody = "&lt;h1&gt;This is a test mail&lt;/h1&gt;";//邮件内容 
$mailtype = "HTML";//邮件格式（HTML/TXT）,TXT为文本邮件 
$smtp = new smtp($smtpserver,$smtpserverport,true,$smtpuser,$smtppass);//这里面的一个true是表示使用身份验证,否则不使用身份验证. 
$smtp-&gt;debug = TRUE;//是否显示发送的调试信息 
$smtp-&gt;sendmail($smtpemailto, $smtpusermail, $mailsubject, $mailbody, $mailtype); 
?&gt;
</code></pre>



<!--more-->




<p>下面是一个基于SMTP协议的邮件发送类：</p>




<pre><code class="php">&lt;?php 
class smtp { 
    /* Public Variables */ 
    var $smtp_port; 
    var $time_out; 
    var $host_name; 
    var $log_file; 
    var $relay_host; 
    var $debug; 
    var $auth; 
    var $user; 
    var $pass; 

    /* Private Variables */ 
    var $sock; 

    /* Constractor */ 
    function smtp($relay_host = "", $smtp_port = 25,$auth = false,$user,$pass) { 
        $this-&gt;debug = FALSE; 
        $this-&gt;smtp_port = $smtp_port; 
        $this-&gt;relay_host = $relay_host; 
        $this-&gt;time_out = 30; //is used in fsockopen() 

        $this-&gt;auth = $auth;//auth 
        $this-&gt;user = $user; 
        $this-&gt;pass = $pass; 
        # 
        $this-&gt;host_name = "localhost"; //is used in HELO command 
        $this-&gt;log_file = ""; 
        $this-&gt;sock = FALSE; 
    } 

    /* Main Function */ 
    function sendmail($to, $from, $subject = "", $body = "", $mailtype, $cc = "", $bcc = "", $additional_headers = "") { 
        $mail_from = $this-&gt;get_address($this-&gt;strip_comment($from)); 
        $body = ereg_replace("(^(\r\n))(\.)", "\1.\3", $body); 
        $header = "MIME-Version:1.0\r\n"; 
        if($mailtype=="HTML"){ 
            $header .= "Content-Type:text/html\r\n"; 
        } 
        $header .= "To: ".$to."\r\n"; 
        if ($cc != "") { 
            $header .= "Cc: ".$cc."\r\n"; 
        } 
        $header .= "From: $from&lt;".$from."&gt;\r\n"; 
        $header .= "Subject: ".$subject."\r\n"; 
        $header .= $additional_headers; 
        $header .= "Date: ".date("r")."\r\n"; 
        $header .= "X-Mailer:By Redhat (PHP/".phpversion().")\r\n"; 
        list($msec, $sec) = explode(" ", microtime()); 
        $header .= "Message-ID: &lt;".date("YmdHis", $sec).".".($msec*1000000).".".$mail_from."&gt;\r\n"; 
        $TO = explode(",", $this-&gt;strip_comment($to)); 
        if ($cc != "") { 
            $TO = array_merge($TO, explode(",", $this-&gt;strip_comment($cc))); 
        } 
        if ($bcc != "") { 
            $TO = array_merge($TO, explode(",", $this-&gt;strip_comment($bcc))); 
        } 

        $sent = TRUE; 
        foreach ($TO as $rcpt_to) { 
            $rcpt_to = $this-&gt;get_address($rcpt_to); 
            if (!$this-&gt;smtp_sockopen($rcpt_to)) { 
                $this-&gt;log_write("Error: Cannot send email to ".$rcpt_to."\n"); 
                $sent = FALSE; 
                continue; 
            } 
            if ($this-&gt;smtp_send($this-&gt;host_name, $mail_from, $rcpt_to, $header, $body)) { 
                $this-&gt;log_write("E-mail has been sent to &lt;".$rcpt_to."&gt;\n"); 
            } else { 
                $this-&gt;log_write("Error: Cannot send email to &lt;".$rcpt_to."&gt;\n"); 
                $sent = FALSE; 
            } 
            fclose($this-&gt;sock); 
            this-&gt;log_write("Disconnected from remote host\n"); 
        } 
        return $sent; 
    } 

    /* Private Functions */ 
    function smtp_send($helo, $from, $to, $header, $body = "") { 
        if (!$this-&gt;smtp_putcmd("HELO", $helo)) { 
            return $this-&gt;smtp_error("sending HELO command"); 
        } 

        if($this-&gt;auth){ 
            if (!$this-&gt;smtp_putcmd("AUTH LOGIN", base64_encode($this-&gt;user))) { 
                return $this-&gt;smtp_error("sending HELO command"); 
            } 
            if (!$this-&gt;smtp_putcmd("", base64_encode($this-&gt;pass))) { 
                return $this-&gt;smtp_error("sending HELO command"); 
            } 
        } 

        if (!$this-&gt;smtp_putcmd("MAIL", "FROM:&lt;".$from."&gt;")) { 
            return $this-&gt;smtp_error("sending MAIL FROM command"); 
        } 
        if (!$this-&gt;smtp_putcmd("RCPT", "TO:&lt;".$to."&gt;")) { 
            return $this-&gt;smtp_error("sending RCPT TO command"); 
        } 
        if (!$this-&gt;smtp_putcmd("DATA")) { 
            return $this-&gt;smtp_error("sending DATA command"); 
        } 
        if (!$this-&gt;smtp_message($header, $body)) { 
            return $this-&gt;smtp_error("sending message"); 
        } 
        if (!$this-&gt;smtp_eom()) { 
            return $this-&gt;smtp_error("sending &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt; [EOM]"); 
        } 
        if (!$this-&gt;smtp_putcmd("QUIT")) { 
            return $this-&gt;smtp_error("sending QUIT command"); 
        } 
        return TRUE; 
    } 

    function smtp_sockopen($address) { 
        if ($this-&gt;relay_host == "") { 
            return $this-&gt;smtp_sockopen_mx($address); 
        } else { 
            return $this-&gt;smtp_sockopen_relay(); 
        } 
    } 

    function smtp_sockopen_relay() { 
        $this-&gt;log_write("Trying to ".$this-&gt;relay_host.":".$this-&gt;smtp_port."\n"); 
        $this-&gt;sock = @fsockopen($this-&gt;relay_host, $this-&gt;smtp_port, $errno, $errstr, $this-&gt;time_out); 
        if (!($this-&gt;sock &amp;&amp; $this-&gt;smtp_ok())) { 
            $this-&gt;log_write("Error: Cannot connenct to relay host ".$this-&gt;relay_host."\n"); 
            $this-&gt;log_write("Error: ".$errstr." (".$errno.")\n"); 
            return FALSE; 
        } 
        $this-&gt;log_write("Connected to relay host ".$this-&gt;relay_host."\n"); 
        return TRUE; 
    } 

    function smtp_sockopen_mx($address) { 
        $domain = ereg_replace("^.+@([^@]+)$", "\1", $address); 
        if (!@getmxrr($domain, $MXHOSTS)) { 
            $this-&gt;log_write("Error: Cannot resolve MX \"".$domain."\"\n"); 
            return FALSE; 
        } 
        foreach ($MXHOSTS as $host) { 
            $this-&gt;log_write("Trying to ".$host.":".$this-&gt;smtp_port."\n"); 
            $this-&gt;sock = @fsockopen($host, $this-&gt;smtp_port, $errno, $errstr, $this-&gt;time_out); 
            if (!($this-&gt;sock &amp;&amp; $this-&gt;smtp_ok())) { 
                $this-&gt;log_write("Warning: Cannot connect to mx host ".$host."\n"); 
                $this-&gt;log_write("Error: ".$errstr." (".$errno.")\n"); 
                continue; 
            } 
            $this-&gt;log_write("Connected to mx host ".$host."\n"); 
            return TRUE; 
        } 
        $this-&gt;log_write("Error: Cannot connect to any mx hosts (".implode(", ", $MXHOSTS).")\n"); 
        return FALSE; 
    } 

    function smtp_message($header, $body) { 
        fputs($this-&gt;sock, $header."\r\n".$body); 
        $this-&gt;smtp_debug("&gt; ".str_replace("\r\n", "\n"."&gt; ", $header."\n&gt; ".$body."\n&gt; ")); 
        return TRUE; 
    } 

    function smtp_eom() { 
        fputs($this-&gt;sock, "\r\n.\r\n"); 
        $this-&gt;smtp_debug(". [EOM]\n"); 
        return $this-&gt;smtp_ok(); 
    } 

    function smtp_ok() { 
        $response = str_replace("\r\n", "", fgets($this-&gt;sock, 512)); 
        $this-&gt;smtp_debug($response."\n"); 
        if (!ereg("^[23]", $response)) { 
            fputs($this-&gt;sock, "QUIT\r\n"); 
            fgets($this-&gt;sock, 512); 
            $this-&gt;log_write("Error: Remote host returned \"".$response."\"\n"); 
            return FALSE; 
        } 
        return TRUE; 
    } 

    function smtp_putcmd($cmd, $arg = "") { 
        if ($arg != "") { 
            if($cmd=="") $cmd = $arg; 
            else $cmd = $cmd." ".$arg; 
        } 
        fputs($this-&gt;sock, $cmd."\r\n"); 
        $this-&gt;smtp_debug("&gt; ".$cmd."\n"); 
        return $this-&gt;smtp_ok(); 
    } 

    function smtp_error($string) { 
        $this-&gt;log_write("Error: Error occurred while ".$string.".\n"); 
        return FALSE; 
    } 

    function log_write($message) { 
        $this-&gt;smtp_debug($message); 
        if ($this-&gt;log_file == "") { 
            return TRUE; 
        } 
        $message = date("M d H:i:s ").get_current_user()."[".getmypid()."]: ".$message; 
        if (!@file_exists($this-&gt;log_file) !($fp = @fopen($this-&gt;log_file, "a"))) { 
            $this-&gt;smtp_debug("Warning: Cannot open log file \"".$this-&gt;log_file."\"\n"); 
            return FALSE;; 
        } 
        flock($fp, LOCK_EX); 
        fputs($fp, $message); 
        fclose($fp); 
        return TRUE; 
    } 

    function strip_comment($address) { 
        $comment = "\([^()]*\)"; 
        while (ereg($comment, $address)) { 
        $address = ereg_replace($comment, "", $address); 
        } 
        return $address; 
    } 

    function get_address($address) { 
        $address = ereg_replace("([ \t\r\n])+", "", $address); 
        $address = ereg_replace("^.*&lt;(.+)&gt;.*$", "\1", $address); 
        return $address; 
    } 

    function smtp_debug($message) { 
        if ($this-&gt;debug) { 
            echo $message; 
        } 
    } 
} 

?&gt; 
</code></pre>
]]></content>
  </entry>
  
</feed>