<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 容器 | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/tags/rong-qi/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2024-10-08T22:34:18+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入理解STL源码(4.5) 关联式容器之hashset和hashmap]]></title>
    <link href="http://ibillxia.github.io/blog/2014/09/27/insight-into-stl-4-associative-containers-5-hashset-and-hashmap/"/>
    <updated>2014-09-27T21:30:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2014/09/27/insight-into-stl-4-associative-containers-5-hashset-and-hashmap</id>
    <content type="html"><![CDATA[<p>本文涉及到 SGI STL 源码的文件主要是 <code>stl_hash_set.h</code>、<code>stl_hash_map.h</code> 等文件。</p>

<h2>1. hashset 和 hash_multi_set</h2>

<p>需要说明的是，STL 标准只规范了复杂度与接口，并没有规范实现方法，但 STL 实现的版本中 set 大多以 RB-tree 为底层机制，SGI STL 在实现了以 RB-tree 为底层机制的 set 外，还实现了以 hashtable 为底层机制的 hashset。<br/>
和 set 一样，hashset 的键值（key）和实值（value）是同一个字段，不同的是 set 默认是自动排序的，而 hashset 则是无序的。除此之外，hashset 与 set 的对外接口完全相同。<br/>
这里还有一种称为 hash_multi_set 的集合，它同 multiset 类似，允许键值重复，而上面的 hashset 则不允许。下面是 hashset 的定义的主要代码：</p>

<!-- more -->


<pre><code class="cpp">template &lt;class _Value, class _HashFcn, class _EqualKey, class _Alloc&gt;
class hash_set {
private:
  typedef hashtable&lt;_Value, _Value, _HashFcn, _Identity&lt;_Value&gt;, _EqualKey, _Alloc&gt; _Ht;
  _Ht _M_ht; // 底层容器的定义
public:
  hash_set() : _M_ht(100, hasher(), key_equal(), allocator_type()) {} // 构造函数
  iterator find(const key_type&amp; __key) const { return _M_ht.find(__key); } // 查找
  size_type count(const key_type&amp; __key) const { return _M_ht.count(__key); } // 计数
  size_type size() const { return _M_ht.size(); } // 表格大小
  size_type max_size() const { return _M_ht.max_size(); } 
  bool empty() const { return _M_ht.empty(); } // 是否为空
  void swap(hash_set&amp; __hs) { _M_ht.swap(__hs._M_ht); } // 交换
  iterator begin() const { return _M_ht.begin(); }
  iterator end() const { return _M_ht.end(); }
  pair&lt;iterator, bool&gt; insert(const value_type&amp; __obj){ // 插入
      pair&lt;typename _Ht::iterator, bool&gt; __p = _M_ht.insert_unique(__obj);
      return pair&lt;iterator,bool&gt;(__p.first, __p.second);
  }
  size_type erase(const key_type&amp; __key) {return _M_ht.erase(__key); } // 擦除
  void erase(iterator __it) { _M_ht.erase(__it); } 
  void erase(iterator __f, iterator __l) { _M_ht.erase(__f, __l); }
  void clear() { _M_ht.clear(); } // 清空
};
template &lt;class _Value, class _HashFcn, class _EqualKey, class _Alloc&gt;
inline bool operator==(const hash_set&lt;_Value,_HashFcn,_EqualKey,_Alloc&gt;&amp; __hs1,
           const hash_set&lt;_Value,_HashFcn,_EqualKey,_Alloc&gt;&amp; __hs2) {
  return __hs1._M_ht == __hs2._M_ht;
}
</code></pre>

<h2>2. hashmap 和 hash_multi_map</h2>

<p>hashmap 是以 hashtable 为底层容器的 map，而 map 是同时拥有实值（value）和键值（key），且不允许键值重复。<br/>
而 hash_multi_map 是以 hashtable 为底层容器的 map，且允许键值重复。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解STL源码(4.4) 关联式容器之hashtable]]></title>
    <link href="http://ibillxia.github.io/blog/2014/09/13/insight-into-stl-4-associative-containers-4-hashtable/"/>
    <updated>2014-09-13T21:30:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2014/09/13/insight-into-stl-4-associative-containers-4-hashtable</id>
    <content type="html"><![CDATA[<p>本文涉及到 SGI STL 源码的文件主要是 <code>stl_hashtable.h</code>、<code>stl_hash_fun.h</code> 等文件。</p>

<h2>1. hashtable 简介</h2>

<p>在数据结构中我们知道，有种数据结构的插入、删除、查找等操作的性能是常数时间，但需要比元素个数更多的空间，这种数据结构就是哈希表。哈希表的基本思想是，将数据存储在与其数值大小相关的地方，比如对该数取模，然后存储在以余数为下表的数组中。但这样会出现一个问题，就是可能会有多个数据被映射到同一个存储位置，即出现了所谓的“碰撞”。哈希表的主要内容就是解决“碰撞”问题，一般而言有以下几种方法：线性探测、二次探测、开链等。</p>

<h4>线性探测</h4>

<p>简单而言，就是在出现“碰撞”后，寻找当前位置以后的空档，然后存入。如果找到尾部都没有空档，则从头部重新开始找。只要空间大小比元素个数大，总能找到的。相应的，元素的查找和删除也与普通的数组不同，查找如果直接定位到相应位置并找到或是空档，就可以确定存在或不存在，而如果定位到当前位置非空且与待查找的元素不同，则要依序寻找后续位置的元素，直到找到或移到了空档。删除则是采用懒惰删除策略，即只标记删除记号，实际删除操作则待表格重新整理时再进行。</p>

<h4>二次探测</h4>

<p>与线性探测类似，但向后寻找的策略是探测距当前位置为平方数的位置，即 $index = H+i<em>^{2}$ </em>。但这样会有一个问题，那就是能否保证每次探测的是不同的位置，即是否存在某次插入时，探测完一圈后回到自己而出现死循环。</p>

<h4>开链</h4>

<p>这种方法是将出现冲突的元素放在一个链表中，而哈希表中只存储这些链表的首地址。SGI STL中就是使用这种方法来解决“碰撞”的。</p>

<h2>2. hashtable 的数据结构</h2>

<p>由于使用开链的方法解决冲突，所以要维护两种数据结构，一个是 hash table，在 STL 中称为 buckets，用 vector 作为容器；另一个是链表，这里没有使用 list 或 slist 这些现成的数据结构，而是使用自定义 <code>__hashtable_node</code> ，相关定义具体如下：</p>

<!-- more -->


<pre><code class="cpp">template &lt;class _Val&gt;
struct _Hashtable_node { // 链表节点的定义
  _Hashtable_node* _M_next; // 指向下一个节点
  _Val _M_val;
}; 
template &lt;class _Val, class _Key, class _HashFcn, class _ExtractKey, class _EqualKey, class _Alloc&gt;
class hashtable {
private:
  typedef _HashFcn hasher;
  hasher                _M_hash; // 哈希函数
  typedef _Hashtable_node&lt;_Val&gt; _Node; // 节点类型别名定义
  vector&lt;_Node*,_Alloc&gt; _M_buckets; // hash table，存储链表的索引
}; 
</code></pre>

<p>这里 hashtable 的模板参数很多，其含义如下：</p>

<blockquote><p><em>Val: 节点的实值类型
</em>Key: 节点的键值类型
<em>HashFcn: 哈希函数的类型
</em>ExtractKey: 从节点中取出键值的方法（函数或仿函数）
<em>EqualKey: 判断键值相同与否的方法（函数或仿函数）
</em>Alloc: 空间配置器，默认使用 std::alloc</p></blockquote>

<p>虽然开链法并不要求哈希表的大小为质数，但 SGI STL 仍然以质数来设计表的大小，并将28个质数（大约2倍依次递增）计算好，并提供函数来查询其中最接近某数并大于某数的质数，如下：<br/>
<code>cpp
enum { __stl_num_primes = 28 };
static const unsigned long __stl_prime_list[__stl_num_primes] = {
  53ul,         97ul,         193ul,       389ul,       769ul,
  1543ul,       3079ul,       6151ul,      12289ul,     24593ul,
  49157ul,      98317ul,      196613ul,    393241ul,    786433ul,
  1572869ul,    3145739ul,    6291469ul,   12582917ul,  25165843ul,
  50331653ul,   100663319ul,  201326611ul, 402653189ul, 805306457ul,
  1610612741ul, 3221225473ul, 4294967291ul
}; // 使用无符号长整型（32bit）
inline unsigned long __stl_next_prime(unsigned long __n) {
  const unsigned long* __first = __stl_prime_list;
  const unsigned long* __last = __stl_prime_list + (int)__stl_num_primes;
  const unsigned long* pos = lower_bound(__first, __last, __n); // lower_bound 是泛型算法，后续会介绍
  return pos == __last ? *(__last - 1) : *pos;
}
</code></p>

<h2>3. hashtable 的空间配置</h2>

<h4>节点空间配置</h4>

<p>首先只考虑比较简单的情况，即哈希表的大小不需要调整，此时空间配置主要是链表节点的配置，而 hashtable 使用 vector 作为容器，链表节点的空间配置（分配和释放）如下：<br/>
<code>cpp
typedef simple_alloc&lt;_Node, _Alloc&gt; _M_node_allocator_type;
_Node* _M_get_node() { return _M_node_allocator_type::allocate(1); } // 分配一个节点的空间
void _M_put_node(_Node* __p) { _M_node_allocator_type::deallocate(__p, 1); } // 释放一个节点的空间
_Node* _M_new_node(const value_type&amp; __obj) {
    _Node* __n = _M_get_node();
    __n-&gt;_M_next = 0;
    __STL_TRY {
        construct(&amp;__n-&gt;_M_val, __obj);
        return __n;
    }
    __STL_UNWIND(_M_put_node(__n));
}
void _M_delete_node(_Node* __n) {
    destroy(&amp;__n-&gt;_M_val);
    _M_put_node(__n);
}
</code></p>

<h4>插入操作表格重新整理</h4>

<p>哈希表的插入操作有两个问题要考虑，一个是 是否允许插入相同键值的元素，另一个是 是否需要扩充表的大小。在 STL 中，首先是判断新插入一个元素后是否需要扩充，判断的条件是插入后元素的个数大于当前哈希表的大小；而是否允许元素重复则通过提供 <code>insert_unique</code> 和 <code>insert_equal</code> 来解决。相关代码如下：<br/>
<code>cpp
pair&lt;iterator, bool&gt; insert_unique(const value_type&amp; __obj) {
    resize(_M_num_elements + 1); // 先进行扩充（如有必要）
    return insert_unique_noresize(__obj); // 然后插入
}
iterator insert_equal(const value_type&amp; __obj) {
    resize(_M_num_elements + 1);
    return insert_equal_noresize(__obj);
}
void hashtable&lt;_Val,_Key,_HF,_Ex,_Eq,_All&gt;::resize(size_type __num_elements_hint) { // 扩充表格
  const size_type __old_n = _M_buckets.size();
  if (__num_elements_hint &gt; __old_n) { // 判断是否需要扩充
    const size_type __n = _M_next_size(__num_elements_hint); // 下一个质数
    if (__n &gt; __old_n) {
      vector&lt;_Node*, _All&gt; __tmp(__n, (_Node*)(0), _M_buckets.get_allocator()); // 新的buckets
      __STL_TRY {
        for (size_type __bucket = 0; __bucket &lt; __old_n; ++__bucket) { // 遍历旧的buckets
          _Node* __first = _M_buckets[__bucket];
          while (__first) { // 处理每一个链表
            size_type __new_bucket = _M_bkt_num(__first-&gt;_M_val, __n); // 确定当前节点落在新buckets中的位置
            _M_buckets[__bucket] = __first-&gt;_M_next; // 指向下一个节点
            __first-&gt;_M_next = __tmp[__new_bucket]; // 在新buckets的新索引位置头部插入
            __tmp[__new_bucket] = __first;
            __first = _M_buckets[__bucket]; // 指向旧链表下一个节点
          }
        }
        _M_buckets.swap(__tmp); // 交换新旧buckets，退出后临时buckets __tmp 自动释放
      }
    }
  }
}
template &lt;class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All&gt;
pair&lt;typename hashtable&lt;_Val,_Key,_HF,_Ex,_Eq,_All&gt;::iterator, bool&gt;
hashtable&lt;_Val,_Key,_HF,_Ex,_Eq,_All&gt;::insert_unique_noresize(const value_type&amp; __obj) { // 不允许键值重复
  const size_type __n = _M_bkt_num(__obj);
  _Node* __first = _M_buckets[__n];
  for (_Node* __cur = __first; __cur; __cur = __cur-&gt;_M_next)
    if (_M_equals(_M_get_key(__cur-&gt;_M_val), _M_get_key(__obj))) // 判断是否存在重复的key
      return pair&lt;iterator, bool&gt;(iterator(__cur, this), false);
  _Node* __tmp = _M_new_node(__obj);
  __tmp-&gt;_M_next = __first;
  _M_buckets[__n] = __tmp;
  ++_M_num_elements;
  return pair&lt;iterator, bool&gt;(iterator(__tmp, this), true);
}
</code>
允许键值重复的插入操作类似的，只是为了确保相同键值的挨在一起，先要找到相同键值的位置，然后插入。</p>

<h4>整体复制和清空</h4>

<p>复制和清空时分别涉及空间的分配和释放，所以在这里也介绍一下。首先是复制操作，需要先将目标 hashtable 清空，然后将源 hashtable 的 buckets 中的每个链表一一复制，如下：<br/>
<code>cpp
template &lt;class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All&gt;
void hashtable&lt;_Val,_Key,_HF,_Ex,_Eq,_All&gt;::_M_copy_from(const hashtable&amp; __ht) {
  _M_buckets.clear(); // 先清空目标 hashtable
  _M_buckets.reserve(__ht._M_buckets.size()); // 大小重置为源 hashtable 的大小
  _M_buckets.insert(_M_buckets.end(), __ht._M_buckets.size(), (_Node*) 0); // 将目标 hashtable 的 buckets 置空
  __STL_TRY {
    for (size_type __i = 0; __i &lt; __ht._M_buckets.size(); ++__i) { // 遍历 buckets
      const _Node* __cur = __ht._M_buckets[__i];
      if (__cur) {
        _Node* __copy = _M_new_node(__cur-&gt;_M_val);
        _M_buckets[__i] = __copy;
        for (_Node* __next = __cur-&gt;_M_next; __next; __cur = __next,
                __next = __cur-&gt;_M_next) { // 复制每个节点
          __copy-&gt;_M_next = _M_new_node(__next-&gt;_M_val);
          __copy = __copy-&gt;_M_next;
        }
      }
    }
    _M_num_elements = __ht._M_num_elements;
  }
  __STL_UNWIND(clear());
}
</code></p>

<h2>4. hashtable 的迭代器</h2>

<p>hashtable 的迭代器是前向的单向迭代器，遍历的方式是先遍历完一个 list 然后切换到下一个 bucket 指向的 list 进行遍历。以下是 hashtable 的迭代器的定义：<br/>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span></span><span class="k">template</span><span class="w"> </span><span class="o">&lt;</span><span class="k">class</span><span class="w"> </span><span class="nc">_Val</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_Key</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_HashFcn</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_ExtractKey</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_EqualKey</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_Alloc</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable_iterator</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="n">hashtable</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Val</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Key</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">HashFcn</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ExtractKey</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EqualKey</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable_iterator</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Val</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Key</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">HashFcn</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ExtractKey</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EqualKey</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc</span><span class="o">&gt;</span><span class="w"> </span><span class="n">iterator</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable_const_iterator</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Val</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Key</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">HashFcn</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ExtractKey</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EqualKey</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc</span><span class="o">&gt;</span><span class="w"> </span><span class="n">const_iterator</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable_node</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Val</span><span class="o">&gt;</span><span class="w"> </span><span class="n">_Node</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="w">  </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Node</span><span class="o">*</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="p">;</span><span class="w"> </span><span class="c1">// 指向当前节点</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable</span><span class="o">*</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_ht</span><span class="p">;</span><span class="w"> </span><span class="c1">// 指向当前节点所在 bucket&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="w">  </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable_iterator</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">_n</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">tab</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">_M_cur</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">n</span><span class="p">),</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_ht</span><span class="p">(</span><span class="n">__tab</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable_iterator</span><span class="p">()</span><span class="w"> </span><span class="p">{}</span>
</span><span class='line'><span class="w">  </span><span class="n">reference</span><span class="w"> </span><span class="k">operator</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="o">-&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_val</span><span class="p">;</span><span class="w"> </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="n">iterator</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="k">operator</span><span class="o">++</span><span class="p">();</span>
</span><span class='line'><span class="w">  </span><span class="n">iterator</span><span class="w"> </span><span class="k">operator</span><span class="o">++</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="w">  </span><span class="kt">bool</span><span class="w"> </span><span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">iterator</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">it</span><span class="p">)</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">_M_cur</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">it</span><span class="p">.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="p">;</span><span class="w"> </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="kt">bool</span><span class="w"> </span><span class="k">operator</span><span class="o">!=</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">iterator</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="n">__it</span><span class="p">)</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">it</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="p">;</span><span class="w"> </span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">template</span><span class="w"> </span><span class="o">&lt;</span><span class="k">class</span><span class="w"> </span><span class="nc">_Val</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_Key</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_HF</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_ExK</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_EqK</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_All</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable_iterator</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Val</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Key</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">HF</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ExK</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EqK</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">All</span><span class="o">&gt;&amp;</span><span class="n">amp</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Hashtable_iterator</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Val</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Key</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">HF</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ExK</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">EqK</span><span class="p">,</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">All</span><span class="o">&gt;::</span><span class="k">operator</span><span class="o">++</span><span class="p">(){</span>
</span><span class='line'><span class="w">  </span><span class="k">const</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Node</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">old</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="o">-&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_next</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="n">_M_cur</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 到了当前 bucket 的尾部</span>
</span><span class='line'><span class="w">    </span><span class="n">size_type</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">bucket</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_ht</span><span class="o">-&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_bkt_num</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">old</span><span class="o">-&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_val</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">!&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="w"> </span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="o">++&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">bucket</span><span class="w"> </span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_ht</span><span class="o">-&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_buckets</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
</span><span class='line'><span class="w">      </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_cur</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_ht</span><span class="o">-&gt;</span><span class="n">_M_buckets</span><span class="p">[</span><span class="n">__bucket</span><span class="p">];</span>
</span><span class='line'><span class="w">  </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>5. 哈希函数</h2>

<p>在第三节中介绍 hashtable 的数据结构时，提到了一个哈希函数类型的模板参数，从键值到索引位置的映射由这个哈希函数来完成，实际中是通过函数 <code>_M_bkt_num_key</code> 来完成这个映射的，如下：<br/>
<code>cpp
size_type _M_bkt_num_key(const key_type&amp; __key) const {
    return _M_bkt_num_key(__key, _M_buckets.size());
}
size_type _M_bkt_num_key(const key_type&amp; __key, size_t __n) const {
    return _M_hash(__key) % __n; // 在这里调用函数 _M_hash，实现映射
}
</code>
这里的 <code>_M_hash</code> 是一个哈希函数类型的成员，可以看做是一个函数指针，真正的函数的定义在 <code>&lt;stl_hash_fun.h&gt;</code> 中，针对 char，int，long 等整数型别，这里大部分的 hash function 什么也没做，只是重视返回原始值，但对字符串（const char* ）设计了一个转换函数，如下：<br/>
<code>cpp
template &lt;class _Key&gt; struct hash { }; // 仿函数 hash
inline size_t __stl_hash_string(const char* __s) { // 将字符串映射为整型
  unsigned long __h = 0;
  for ( ; *__s; ++__s)
    __h = 5*__h + *__s;
  return size_t(__h);
}
__STL_TEMPLATE_NULL struct hash&lt;char*&gt; {
  size_t operator()(const char* __s) const { return __stl_hash_string(__s); } // 函数调用操作符 operator()
};
__STL_TEMPLATE_NULL struct hash&lt;const char*&gt; {
  size_t operator()(const char* __s) const { return __stl_hash_string(__s); }
};
__STL_TEMPLATE_NULL struct hash&lt;char&gt; {
  size_t operator()(char __x) const { return __x; }
};
__STL_TEMPLATE_NULL struct hash&lt;unsigned char&gt; {
  size_t operator()(unsigned char __x) const { return __x; }
};
__STL_TEMPLATE_NULL struct hash&lt;signed char&gt; {
  size_t operator()(unsigned char __x) const { return __x; }
};
__STL_TEMPLATE_NULL struct hash&lt;short&gt; {
  size_t operator()(short __x) const { return __x; }
};
__STL_TEMPLATE_NULL struct hash&lt;unsigned short&gt; {
  size_t operator()(unsigned short __x) const { return __x; }
};
__STL_TEMPLATE_NULL struct hash&lt;int&gt; {
  size_t operator()(int __x) const { return __x; }
};
__STL_TEMPLATE_NULL struct hash&lt;unsigned int&gt; {
  size_t operator()(unsigned int __x) const { return __x; }
};
__STL_TEMPLATE_NULL struct hash&lt;long&gt; {
  size_t operator()(long __x) const { return __x; }
};
__STL_TEMPLATE_NULL struct hash&lt;unsigned long&gt; {
  size_t operator()(unsigned long __x) const { return __x; }
};
</code>
关于函数调用操作符的更多介绍，可以参见我的另一篇文章 【<a href="http://ibillxia.github.io/blog/2014/05/24/function-pointer-in-c-and-function-call-operator-in-cpp/">C语言函数指针与C++函数调用操作符</a>】。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解STL源码(4.3) 关联式容器之map和multimap]]></title>
    <link href="http://ibillxia.github.io/blog/2014/08/31/insight-into-stl-4-associative-containers-3-map-and-multimap/"/>
    <updated>2014-08-31T21:30:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2014/08/31/insight-into-stl-4-associative-containers-3-map-and-multimap</id>
    <content type="html"><![CDATA[<p>本文涉及到 SGI STL 源码的文件主要是 <code>stl_map.h</code>、<code>stl_multimap.h</code>、<code>stl_pair.h</code>、<code>map.h</code>、 <code>multimap.h</code>、 <code>map</code>  等文件。</p>

<h2>1. map 简介</h2>

<p>map 的特性是，所有元素都是键值对，用一个 pair 表示，pair 的第一个元素是键值（key），第二个元素是实值（value），map 不允许两个元素的键值相同。<br/>
与 set 类似的，map 也不允许修改 key 的值，但不同的是可以修改 value 的值，因此 map 的迭代器既不是一种 constant iterators，也不是一种 mutable iterators。同样的，map的插入和删除操作不影响操作之前定义的迭代器的使用（被删除的那个元素除外）。<br/>
与 set 不同的是，map 没有交、并、差等运算，只有插入、删除、查找、比较等基本操作。</p>

<h2>2. map 的实现</h2>

<p>由于 map 的元素是键值对，用 pair 表示，下面是它的定义：<br/>
<code>cpp
template &lt;class _T1, class _T2&gt;
struct pair {
  typedef _T1 first_type;
  typedef _T2 second_type;
  _T1 first; // 两个成员 first 和 second
  _T2 second;
  pair() : first(_T1()), second(_T2()) {} // 构造函数
  pair(const _T1&amp; __a, const _T2&amp; __b) : first(__a), second(__b) {} // 拷贝构造函数
};
template &lt;class _T1, class _T2&gt;
inline bool operator==(const pair&lt;_T1, _T2&gt;&amp; __x, const pair&lt;_T1, _T2&gt;&amp; __y) { // 相等比较
  return __x.first == __y.first &amp;&amp; __x.second == __y.second;
}
template &lt;class _T1, class _T2&gt;
inline bool operator&lt;(const pair&lt;_T1, _T2&gt;&amp; __x, const pair&lt;_T1, _T2&gt;&amp; __y) { // 大小比较
  return __x.first &lt; __y.first || (!(__y.first &lt; __x.first) &amp;&amp; __x.second &lt; __y.second);
}
template &lt;class _T1, class _T2&gt;
inline pair&lt;_T1, _T2&gt; make_pair(const _T1&amp; __x, const _T2&amp; __y) { // 创建一个 pair
  return pair&lt;_T1, _T2&gt;(__x, __y);
}
</code></p>

<!-- more -->


<p>然后是 map 的定义，大体上和 set 差不多，只是在使用 RB-tree 作为容器时，传入的模板参数是一个 pair，主要代码如下：<br/>
<code>cpp
template &lt;class _Key, class _Tp, class _Compare, class _Alloc&gt;
class map {
public:
  typedef _Key                  key_type;
  typedef _Tp                   data_type;
  typedef _Tp                   mapped_type;
  typedef pair&lt;const _Key, _Tp&gt; value_type;
  typedef _Compare              key_compare;
  // 一个用于键值比较的内部类
  class value_compare : public binary_function&lt;value_type, value_type, bool&gt; {
  friend class map&lt;_Key,_Tp,_Compare,_Alloc&gt;;
  protected :
    _Compare comp;
    value_compare(_Compare __c) : comp(__c) {}
  public:
    bool operator()(const value_type&amp; __x, const value_type&amp; __y) const {
      return comp(__x.first, __y.first);
    }
  };
private:
  typedef _Rb_tree&lt;key_type, value_type, _Select1st&lt;value_type&gt;,
    key_compare, _Alloc&gt; _Rep_type; // 这里的value_type是一个pair&lt;const _Key, _Tp&gt;
  _Rep_type _M_t;  // 用红黑树作为底层容器
public:
  map() : _M_t(_Compare(), allocator_type()) {} // 默认构造函数
  bool empty() const { return _M_t.empty(); } // 判断是否为空
  size_type size() const { return _M_t.size(); } // 获取元素个数
  map(const value_type* __first, const value_type* __last)
    : _M_t(_Compare(), allocator_type())
    { _M_t.insert_unique(__first, __last); } // 构造函数，使用insert_unique，键值不允许重复
  void insert(const value_type* __first, const value_type* __last) { // 插入操作
    _M_t.insert_unique(__first, __last);
  }
  void erase(iterator __position) { _M_t.erase(__position); } // 删除操作
  iterator find(const key_type&amp; __x) { return _M_t.find(__x); } // 查找操作
};
</code>
可以看到，基本也是对底层容器 RB-tree 的一个简单的封装。</p>

<h2>3. multimap</h2>

<p>multimap 与 map 的关系和 multiset 与 set 的关系一样，即 multimap 允许键值（key）重复，插入操作使用 RB-tree 的 <code>insert_equal</code> ，其他都和 map 一样，这里就不贴源代码了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解STL源码(4.2) 关联式容器之set和multiset]]></title>
    <link href="http://ibillxia.github.io/blog/2014/08/17/insight-into-stl-4-associative-containers-2-set-and-multiset/"/>
    <updated>2014-08-17T21:30:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2014/08/17/insight-into-stl-4-associative-containers-2-set-and-multiset</id>
    <content type="html"><![CDATA[<p>本文涉及到 SGI STL 源码的文件主要有 <code>stl_set.h</code>、 <code>stl_multiset.h</code>、 <code>set.h</code>、 <code>multiset.h</code>、 <code>set</code> 等文件。</p>

<h2>1. set 简介</h2>

<p>set 即集合，相比于其他容器有些特别。首先是它的每个元素是唯一的，即不允许有相同的值出现。其次，作为一种关联容器，set 的元素不像 map 那样可以同时拥有实值（value）和键值（key），set 元素的键值就是实值，实值就是键值。<br/>
由于 set 的实质和键值相同，共用同一个内存空间，而 set 的底层容器为红黑树（中序遍历有序），因此不能对其键值进行修改，否则会破坏其有序特性。为避免非法修改操作，在SGI STL的实现中，<code>set&lt;T&gt;::iterator</code> 被定义为 RB-tree 底层的 const_iterator，_杜绝写入操作。set 与 list 有一个相似的地方是，元素插入、删除后，之前的迭代器依然有效（被删除的那个元素的迭代器除外）。<br/>
我们知道集合有一些特殊的操作，诸如并、交、差等，在STL的 set 中，默认也提供了这些操作，如交集 <code>set_intersection</code> 、联集 <code>set_union</code> 、差集 <code>set_difference</code> 和对称差集 <code>set_symmetric_difference</code> 等。与之前那些线性容器不同的是，这些 set 的操作并不是在 set 内部实现的，而是放在了算法模块（algorithm）中，其具体实现在后面的算法章节中会具体介绍。</p>

<h2>2. set 的实现</h2>

<p>前面多次提到 set 的底层采用 RB-tree 容器，这是因为 RB-tree 是一种比较高效的平衡二叉搜索树，能够很好的满足元素值唯一的条件，而且查找效率高。由于 RB-tree 已实现了很多操作，因此 set 基本上只是对 RB-tree 进行了一层简单的封装。下面是其实现的主要代码：</p>

<!-- more -->


<pre><code class="cpp">template &lt;class _Key, class _Compare, class _Alloc&gt;
class set {
public:
  typedef _Key     key_type;
  typedef _Key     value_type; // 实值与键值同类型
private:
  typedef _Rb_tree&lt;key_type, value_type, _Identity&lt;value_type&gt;, key_compare, _Alloc&gt; _Rep_type;
  _Rep_type _M_t;  // 底层使用红黑树作为容器
  set() : _M_t(_Compare(), allocator_type()) {} // 默认构造函数
  set(const set&lt;_Key,_Compare,_Alloc&gt;&amp; __x) : _M_t(__x._M_t) {}  // 拷贝构造函数
  pair&lt;iterator,bool&gt; insert(const value_type&amp; __x) { // 插入操作
    pair&lt;typename _Rep_type::iterator, bool&gt; __p = _M_t.insert_unique(__x); 
    return pair&lt;iterator, bool&gt;(__p.first, __p.second);
  }
  void erase(iterator __position) { // 删除操作
    typedef typename _Rep_type::iterator _Rep_iterator;
    _M_t.erase((_Rep_iterator&amp;)__position); 
  }
  void clear() { _M_t.clear(); } // 清空操作
  iterator find(const key_type&amp; __x) const { return _M_t.find(__x); } // 查找
  size_type count(const key_type&amp; __x) const { // 计数
    return _M_t.find(__x) == _M_t.end() ? 0 : 1;
  }
};
template &lt;class _Key, class _Compare, class _Alloc&gt;
inline bool operator==(const set&lt;_Key,_Compare,_Alloc&gt;&amp; __x, 
                       const set&lt;_Key,_Compare,_Alloc&gt;&amp; __y) { // 比较相等操作符
  return __x._M_t == __y._M_t;
}
template &lt;class _Key, class _Compare, class _Alloc&gt;
inline bool operator&lt;(const set&lt;_Key,_Compare,_Alloc&gt;&amp; __x, 
                      const set&lt;_Key,_Compare,_Alloc&gt;&amp; __y) { // 比较大小操作符
  return __x._M_t &lt; __y._M_t;
}
</code></pre>

<p>可以看到基本都是调用 <code>_M_t</code> 的方法来实现的，而这里的 <code>_M_t</code> 是一个红黑树对象。</p>

<h2>3. multiset</h2>

<p>multiset 的特性和用法与 set 基本相同，唯一差别在于它允许有重复的键值，因此它的插入操作使用的底层机制是 RB-tree 的 <code>insert_equal()</code> 而不是 <code>insert_unique()</code> ，下面是 multiset 的主要代码，主要列出了与 set 不同的部分。<br/>
<code>cpp
template &lt;class _Key, class _Compare, class _Alloc&gt;
class multiset {
public:
  multiset(const value_type* __first, const value_type* __last)
    : _M_t(_Compare(), allocator_type())
    { _M_t.insert_equal(__first, __last); } // 构造函数
  iterator insert(const value_type&amp; __x) { // 插入操作
    return _M_t.insert_equal(__x);
  }
  iterator insert(iterator __position, const value_type&amp; __x) {
    typedef typename _Rep_type::iterator _Rep_iterator;
    return _M_t.insert_equal((_Rep_iterator&amp;)__position, __x);
  }
  void insert(const value_type* __first, const value_type* __last) {
    _M_t.insert_equal(__first, __last);
  }
  void insert(const_iterator __first, const_iterator __last) {
    _M_t.insert_equal(__first, __last);
  }
};
</code>
其他部分基本与 set 一样。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解STL源码(4.1) 关联式容器之红黑树]]></title>
    <link href="http://ibillxia.github.io/blog/2014/08/03/insight-into-stl-4-associative-containers-1-red-black-tree/"/>
    <updated>2014-08-03T21:30:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2014/08/03/insight-into-stl-4-associative-containers-1-red-black-tree</id>
    <content type="html"><![CDATA[<p>本文涉及到 SGI STL 源码的文件主要是 <code>stl_tree.h</code> 这个文件。</p>

<h2>0. 关联式容器</h2>

<p>之前几篇文章详细介绍了SGI STL中序列式容器的实现，并提到过STL中还有一类关联式的容器。标准的STL管理师容器分为 set（集合）和map（映射表）两大类，以及这两大类的衍生体multiset（多键集合）和multimap（多键映射表），这些容器的底层机制均以RB-Tree（红黑树）完成。RB-Tree是一种非常高效的数据结构，它本质上是一种平衡的二叉搜索树，因而其查找的平均时间复杂度为元素总个数的对数（即logN）。在STL中RB-Tree是一个独立的容器，但并没有对用户的公开接口，仅提供给STL的set和map使用。<br/>
SGI STL在标准STL之外，还提供了一类关联式容器——hash table（哈希表），以及以此为低层机制的hash set（散列集合）、hash map（散列映射表）、hash multiset（散列多键集合）和hash multimap（散列多键映射表）。相比于RB-Tree，hash table的时间效率更高，插入、删除、查找的时间复杂度均为常数时间，但需要比元素总个数多得多的空间。<br/>
本文接下来主要介绍树及RB-Tree相关的内容，后续文章将具体介绍SGI STL中set、map、hash table的实现。</p>

<h2>1. 树与二叉搜索树</h2>

<p>树是一种非常常见而且实用的数据结构，几乎所有的操作系统都将文件存放在树状结构里，几乎所有编译器需要实现一个表达式树（expression tree），文件压缩所用的哈夫曼算法也需要用到树状结构，数据库所使用的B-tree则是一种相当复杂的树状结构。<br/>
关于树的一些基本概念相信大家都比较熟悉，这里就不赘述了，如果需要可以google或看wikipedia，这里重点重温一下数据结构里的二叉搜索树、平衡二叉搜索树、AVL树。<br/>
<strong>二叉搜索树</strong>：任何节点的键值大于其<strong>左子树</strong>中<strong>每一个</strong>节点的键值，并小于其<strong>右子树</strong>中的<strong>每一个</strong>节点的键值。根据二叉搜索树的定义可知，按照中序遍历该树可以得到一个有序的序列。平均情况下，二叉搜索树可以提供对数时间的插入和访问。其插入和查找的算法也很简单，每次与根节点的键值进行比较，小于根节点的键值则往根节点的左子树插入或查找，大于则往右子树插入或查找，无论是递归实现还是非递归实现都很简单。<br/>
<strong>平衡二叉搜索树</strong>：上面提到二叉搜索数的<strong>平均</strong>性能为对数时间，这是因为二叉搜索树的深度与数据插入的顺序有关，如果插入的数据本身就比较有序，那么就会产生一个深度过大的树，甚至会退化为一个链表的结构，这中情况下，其查找的效率就是线性时间了。平衡二叉搜索树就是为了解决这个问题而产生的，“平衡”的意义是，没有任何一个节点过深。不同的平衡条件造就出不同的效率表现，以及不同的实现复杂度，如 <a href="http://en.wikipedia.org/wiki/AVL_tree">AVL-Tree</a>、<a href="http://en.wikipedia.org/wiki/Red%E2%80%93black_tree">RB-Tree</a>、<a href="http://en.wikipedia.org/wiki/AA_tree">AA-Tree</a> _等。他们都比简单的二叉搜索树要复杂，特别是插入和删除操作，但他们可以避免高度不平衡的情况，因而查找时间较快。</p>

<!-- more -->


<p><strong>AVL树</strong>：AVL-tree（Adelson-Velskii-Landis tree）是一个加上了“额外平衡条件”的二叉搜索树，是一种高度平衡的二叉搜索树，它的这个额外的条件为：任何节点的左右子树高度相差最多1。该条件能够保证整棵树的高度为logN，但其插入和删除的操作也相对比较复杂，因为这些操作可能导致树的失衡，需要调整（或旋转）树的结构，使其保持平衡。插入时出现失衡的情况有如下四种（其中X为最小失衡子树的根节点）：</p>

<blockquote><ol>
<li>插入点位于X的左子节点的左子树——左左；</li>
<li>插入点位于X的左子节点的右子树——左右；</li>
<li>插入点位于X的右子节点的左子树——右左；</li>
<li>插入点位于X的右子节点的右子树——右右。</li>
</ol>
</blockquote>

<p>情况1和4对称，称为外侧插入，可以采用单旋转操作调整恢复平衡；2和3对称，称为内侧插入，可以采用双旋转操作调整恢复平衡：先经过一次旋转变成左左或右右，然后再经过一次旋转恢复平衡。1和2的实例如下图：<br/>
<img src="/images/2014/IMAG2014080301.jpg"><br/>
图中从中间到最右情况1的恢复平衡的旋转方法，只是其中节点3为新插入的元素；而最左到最右是情况2的恢复平衡的旋转方法，其中节点4为新插入的元素。情况3和4分别与2和1对称，其调整方法也很类似，就不赘述了。<br/>
RB-tree是另一种被广泛使用的平衡二叉搜索树，也是SGI STL唯一实现的一种搜索树，作为关联式容器的底层容器。RB-tree的平衡条件不同于AVL-tree，但同样运用了单旋转和双旋转的恢复平衡的机制，下面我们详细介绍RB-tree的实现。</p>

<h2>2. RB-tree的定义及数据结构</h2>

<p>所谓RB-tree，不仅仅是一个二叉搜索树，而且必须满足以下规则：</p>

<blockquote><ol>
<li>每个节点不是红色就是黑色；</li>
<li>根节点为黑色；</li>
<li>每个叶子节点（NIL）为黑色；</li>
<li>如果节点为红，其左右子节点必为黑；</li>
<li>对每个节点，从该节点到其子孙中的叶子节点的所有路径上所包含的黑节点数目相同。</li>
</ol>
</blockquote>

<p>上面的这些约束保证了这个树大致上是平衡的，这也决定了红黑树的插入、删除、查询等操作是比较快速的。 根据规则5，新增节点必须为红色；根据规则4，新增节点之父节点必须为黑色。当新增节点根据二叉搜索树的规则到达其插入点时，却未能符合上述条件时，就必须调整颜色并旋转树形。下图是一个典型的RB-tree（来自wiki）：<br/>
<img src="/images/2014/IMAG2014080302.png"><br/>
SGI STL中RB-tree的数据结构比较简单，其中每个节点的数据结构如下：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span></span><span class="k">typedef</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_Color_type</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_Color_type</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">S_rb_tree_red</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_Color_type</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">S_rb_tree_black</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="c1">//======================================</span>
</span><span class='line'><span class="k">struct</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node_base</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 节点的定义</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_Color_type</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Color_type</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node_base</span><span class="o">*</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base_ptr</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Color_type</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_color</span><span class="p">;</span><span class="w"> </span><span class="c1">// 节点颜色，实际为一个bool型变量</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base_ptr</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_parent</span><span class="p">;</span><span class="w"> </span><span class="c1">// 指向父节点，方便遍历</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base_ptr</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_left</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base_ptr</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_right</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="w">  </span><span class="k">static</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base_ptr</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">S_minimum</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base_ptr</span><span class="w"> </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="o">-&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_left</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="o">-&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_left</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">__x</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="k">static</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base_ptr</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">S_maximum</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base_ptr</span><span class="w"> </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="o">-&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_right</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="o">-&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_right</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//======================================</span>
</span><span class='line'><span class="k">template</span><span class="w"> </span><span class="o">&lt;</span><span class="k">class</span><span class="w"> </span><span class="nc">_Value</span><span class="o">&gt;</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="k">public</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node_base</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 节点的定义</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Value</span><span class="o">&gt;&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Link_type</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Value</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_value_field</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">其中每个节点主要包含一个标志颜色的bool变量</span><span class="w"> </span><span class="err">`</span><span class="n">_M_color</span><span class="err">`，</span><span class="mi">3</span><span class="n">个节点指针</span><span class="w"> </span><span class="err">`</span><span class="n">_M_parent</span><span class="err">`</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="err">`</span><span class="n">_M_left</span><span class="err">`</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="err">`</span><span class="n">_M_right</span><span class="err">`，</span><span class="mi">2</span><span class="n">个成员函数</span><span class="w"> </span><span class="err">`</span><span class="n">_S_minimum</span><span class="err">`</span><span class="w"> </span><span class="n">和</span><span class="w"> </span><span class="err">`</span><span class="n">_S_maximum</span><span class="err">`</span><span class="w"> </span><span class="err">（</span><span class="n">分别求取最小</span><span class="err">（</span><span class="n">最左</span><span class="err">）、</span><span class="n">最大</span><span class="err">（</span><span class="n">最右</span><span class="err">）</span><span class="n">节点</span><span class="err">）。</span><span class="w">  </span>
</span><span class='line'><span class="n">而RB</span><span class="o">-</span><span class="n">tree的定义如下</span><span class="err">：</span><span class="w">  </span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="w"> </span><span class="n">cpp</span>
</span><span class='line'><span class="k">template</span><span class="w"> </span><span class="o">&lt;</span><span class="k">class</span><span class="w"> </span><span class="nc">_Tp</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_Alloc</span><span class="o">&gt;</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_base</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// RB-tree的定义</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc</span><span class="w"> </span><span class="n">allocator_type</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="n">allocator_type</span><span class="w"> </span><span class="nf">get_allocator</span><span class="p">()</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="n">allocator_type</span><span class="p">();</span><span class="w"> </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_base</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">allocator_type</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;)</span><span class="w">  </span><span class="o">:</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_header</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_header</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_get_node</span><span class="p">();</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="c1">// 构造函数</span>
</span><span class='line'><span class="w">  </span><span class="o">~&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_base</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_put_node</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_header</span><span class="p">);</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="c1">// 析构函数</span>
</span><span class='line'><span class="k">protected</span><span class="o">:</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Tp</span><span class="o">&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_header</span><span class="p">;</span><span class="w"> </span><span class="c1">// 根节点</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="n">simple_alloc</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Tp</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc_type</span><span class="p">;</span><span class="w"> </span><span class="c1">// 空间配置器</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Tp</span><span class="o">&gt;*</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_get_node</span><span class="p">()</span><span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc_type</span><span class="o">::</span><span class="n">allocate</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="c1">// 分配一个节点的空间</span>
</span><span class='line'><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">M_put_node</span><span class="p">(</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Tp</span><span class="o">&gt;*</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc_type</span><span class="o">::</span><span class="n">deallocate</span><span class="p">(</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="c1">// 释放&lt;/strong&gt;p节点的空间</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="c1">//======================================</span>
</span><span class='line'><span class="k">template</span><span class="w"> </span><span class="o">&lt;</span><span class="k">class</span><span class="w"> </span><span class="nc">_Key</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_Value</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_KeyOfValue</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_Compare</span><span class="p">,</span>
</span><span class='line'><span class="w">          </span><span class="k">class</span><span class="w"> </span><span class="nc">_Alloc</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__STL_DEFAULT_ALLOCATOR</span><span class="p">(</span><span class="n">_Value</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="k">protected</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_base</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Value</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_base</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Value</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Alloc</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Base</span><span class="p">;</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="err">``</span>
</span><span class='line'><span class="n">可以看到RB</span><span class="o">-</span><span class="n">tree的空间配置器是</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="n">simple_alloc</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">配置器</span><span class="err">，</span><span class="n">按</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">Rb_tree_node</span><span class="err">`</span><span class="w"> </span><span class="n">节点大小分配空间</span><span class="err">，</span><span class="n">每次分配或释放一个节点的空间</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="mf">3.</span><span class="w"> </span><span class="n">RB</span><span class="o">-</span><span class="n">tree的迭代器</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">要将RB</span><span class="o">-</span><span class="n">tree实现为一个泛型容器并用作set</span><span class="err">、</span><span class="n">map的低层容器</span><span class="err">，</span><span class="n">迭代器的设计是一个关键</span><span class="err">。</span><span class="n">RB</span><span class="o">-</span><span class="n">tree的迭代器是一个双向迭代器</span><span class="err">，</span><span class="n">但不具备随机访问能力</span><span class="err">，</span><span class="n">其引用</span><span class="err">（</span><span class="n">dereference</span><span class="err">）</span><span class="n">和访问</span><span class="err">（</span><span class="n">access</span><span class="err">）</span><span class="n">操作与list十分类似</span><span class="err">，</span><span class="n">较为特殊的是自增</span><span class="err">（</span><span class="k">operator</span><span class="o">++</span><span class="err">）</span><span class="n">和自减</span><span class="err">（</span><span class="k">operator</span><span class="o">--</span><span class="err">）</span><span class="n">操作</span><span class="err">，</span><span class="n">这里的自增</span><span class="o">/</span><span class="n">自减操作是指将迭代器移动到RB</span><span class="o">-</span><span class="n">tree按键值大小排序后当前节点的下一个</span><span class="o">/</span><span class="n">上一个节点</span><span class="err">，</span><span class="n">也即按中序遍历RB</span><span class="o">-</span><span class="n">tree时当前节点的下一个</span><span class="o">/</span><span class="n">上一个节点</span><span class="err">。</span><span class="n">RB</span><span class="o">-</span><span class="n">tree的迭代器的定义如下</span><span class="err">：</span><span class="w"> </span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cpp</span>
</span><span class='line'><span class="k">struct</span><span class="w"> </span><span class="nc">_Rb_tree_base_iterator</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="n">_Rb_tree_node_base</span><span class="o">::</span><span class="n">_Base_ptr</span><span class="w"> </span><span class="n">_Base_ptr</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="k">typedef</span><span class="w"> </span><span class="n">bidirectional_iterator_tag</span><span class="w"> </span><span class="n">iterator_category</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">_M_increment</span><span class="p">()</span><span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="nf">_M_decrement</span><span class="p">()</span><span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="k">template</span><span class="w"> </span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="k">class</span><span class="w"> </span><span class="nc">_Value</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_Ref</span><span class="p">,</span><span class="w"> </span><span class="k">class</span><span class="w"> </span><span class="nc">_Ptr</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span><span class="w"> </span><span class="nc">_Rb_tree_iterator</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="k">public</span><span class="w"> </span><span class="n">_Rb_tree_base_iterator</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">  </span><span class="n">_Self</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="k">operator</span><span class="o">++</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">_M_increment</span><span class="p">();</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="o">*</span><span class="k">this</span><span class="p">;</span><span class="w"> </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="n">_Self</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="k">operator</span><span class="o">--</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">_M_decrement</span><span class="p">();</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="o">*</span><span class="k">this</span><span class="p">;</span><span class="w"> </span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">可以看到RB</span><span class="o">-</span><span class="n">tree的自增和自减操作是使用基迭代器的increment和decrement来实现的</span><span class="err">，</span><span class="n">这里仅分析自增操作的实现</span><span class="err">（</span><span class="n">自减操作类似的</span><span class="err">）。</span><span class="n">RB</span><span class="o">-</span><span class="n">tree的自增操作实际上是寻找中序遍历下当前节点的后一个节点</span><span class="err">，</span><span class="n">其代码如下</span><span class="err">：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cpp</span>
</span><span class='line'><span class="w">  </span><span class="kt">void</span><span class="w"> </span><span class="n">_M_increment</span><span class="p">()</span><span class="w">  </span><span class="p">{</span><span class="w"> </span><span class="c1">// 自增操作，中序遍历的下一个节点</span>
</span><span class='line'><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">_M_node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_right</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 当前节点有右子树</span>
</span><span class='line'><span class="w">      </span><span class="n">_M_node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_M_node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_right</span><span class="p">;</span>
</span><span class='line'><span class="w">      </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">_M_node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_left</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="c1">// 右子树的最左节点即为所求</span>
</span><span class='line'><span class="w">        </span><span class="n">_M_node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_M_node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_left</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 当前节点没有右子树，找父节点且父节点的右子树不包含当前节点的祖先节点</span>
</span><span class='line'><span class="w">      </span><span class="n">_Base_ptr</span><span class="w"> </span><span class="n">__y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_M_node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_parent</span><span class="p">;</span>
</span><span class='line'><span class="w">      </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">_M_node</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">__y</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_right</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 当前节点在父节点的右子树中就继续往父节点的父节点找</span>
</span><span class='line'><span class="w">        </span><span class="n">_M_node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__y</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="n">__y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__y</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_parent</span><span class="p">;</span>
</span><span class='line'><span class="w">      </span><span class="p">}</span>
</span><span class='line'><span class="w">      </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">_M_node</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_right</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">__y</span><span class="p">)</span>
</span><span class='line'><span class="w">        </span><span class="n">_M_node</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__y</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">下面几节主要介绍一下RB</span><span class="o">-</span><span class="n">tree的基本操作</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="mf">4.</span><span class="w"> </span><span class="n">RB</span><span class="o">-</span><span class="n">tree的插入操作</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="mf">4.1</span><span class="w"> </span><span class="n">基本插入操作</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">RB</span><span class="o">-</span><span class="n">tree提供两种插入操作</span><span class="err">，</span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">insert_unique</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="w"> </span><span class="n">和</span><span class="w"> </span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">insert_equal</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="err">，</span><span class="n">顾名思义</span><span class="err">，</span><span class="n">前者表示被插入的节点的键值在树中是唯一的</span><span class="err">（</span><span class="n">如果已经存在</span><span class="err">，</span><span class="n">就不需要插入了</span><span class="err">），</span><span class="n">后者表示可以存在键值相同的节点</span><span class="err">。</span><span class="n">这两个函数都有多个版本</span><span class="err">，</span><span class="n">下面以后者的最简单版本</span><span class="err">（</span><span class="n">单一参数</span><span class="err">：</span><span class="n">被插入的节点的键值</span><span class="err">）</span><span class="n">为实例进行介绍</span><span class="err">。</span><span class="n">下面是</span><span class="w"> </span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">insert_equal</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="w"> </span><span class="n">的实现</span><span class="err">：</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cpp</span>
</span><span class='line'><span class="n">_Rb_tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">_Key</span><span class="p">,</span><span class="n">_Value</span><span class="p">,</span><span class="n">_KeyOfValue</span><span class="p">,</span><span class="n">_Compare</span><span class="p">,</span><span class="n">_Alloc</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="w"> </span><span class="o">::</span><span class="n">insert_equal</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="n">_Value</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="n">__v</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">  </span><span class="n">_Link_type</span><span class="w"> </span><span class="n">__y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_M_header</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="n">_Link_type</span><span class="w"> </span><span class="n">__x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_M_root</span><span class="p">();</span><span class="w"> </span><span class="c1">// 从根节点开始</span>
</span><span class='line'><span class="w">  </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">__x</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// 往下寻找插入点</span>
</span><span class='line'><span class="w">    </span><span class="n">__y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__x</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="c1">// 比较，当前节点的键值比插入值大往左子树找，否则往右子树找</span>
</span><span class='line'><span class="w">    </span><span class="n">__x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_M_key_compare</span><span class="p">(</span><span class="n">_KeyOfValue</span><span class="p">()(</span><span class="n">__v</span><span class="p">),</span><span class="w"> </span><span class="n">_S_key</span><span class="p">(</span><span class="n">__x</span><span class="p">))</span><span class="w"> </span><span class="o">?</span><span class="w"> </span><span class="n">_S_left</span><span class="p">(</span><span class="n">__x</span><span class="p">)</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="n">_S_right</span><span class="p">(</span><span class="n">__x</span><span class="p">);</span>
</span><span class='line'><span class="w">  </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">_M_insert</span><span class="p">(</span><span class="n">__x</span><span class="p">,</span><span class="w"> </span><span class="n">__y</span><span class="p">,</span><span class="w"> </span><span class="n">__v</span><span class="p">);</span><span class="w"> </span><span class="c1">// 真正的插入操作，x为新插入节点，y为x的父节点，v为新值</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//真正的插入操作，主要是对RB-tree及新节点的成员变量的设置</span>
</span><span class='line'><span class="n">_Rb_tree</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">_Key</span><span class="p">,</span><span class="n">_Value</span><span class="p">,</span><span class="n">_KeyOfValue</span><span class="p">,</span><span class="n">_Compare</span><span class="p">,</span><span class="n">_Alloc</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="w"> </span><span class="o">::</span><span class="n">_M_insert</span><span class="p">(</span><span class="n">_Base_ptr</span><span class="w"> </span><span class="n">__x_</span><span class="p">,</span><span class="w"> </span><span class="n">_Base_ptr</span><span class="w"> </span><span class="n">__y_</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="n">_Value</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="n">__v</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">  </span><span class="n">_Link_type</span><span class="w"> </span><span class="n">__x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">_Link_type</span><span class="p">)</span><span class="w"> </span><span class="n">__x_</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="n">_Link_type</span><span class="w"> </span><span class="n">__y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">_Link_type</span><span class="p">)</span><span class="w"> </span><span class="n">__y_</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="n">_Link_type</span><span class="w"> </span><span class="n">__z</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">__y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">_M_header</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">__x</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="n">_M_key_compare</span><span class="p">(</span><span class="n">_KeyOfValue</span><span class="p">()(</span><span class="n">__v</span><span class="p">),</span><span class="w"> </span><span class="n">_S_key</span><span class="p">(</span><span class="n">__y</span><span class="p">)))</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="n">__z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_M_create_node</span><span class="p">(</span><span class="n">__v</span><span class="p">);</span><span class="w"> </span><span class="c1">// 创建新节点</span>
</span><span class='line'><span class="w">    </span><span class="n">_S_left</span><span class="p">(</span><span class="n">__y</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__z</span><span class="p">;</span><span class="w">     </span><span class="c1">// makes _M_leftmost() = __z, when __y == _M_header</span>
</span><span class='line'><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">__y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">_M_header</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="c1">// y为header</span>
</span><span class='line'><span class="w">      </span><span class="n">_M_root</span><span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__z</span><span class="p">;</span>
</span><span class='line'><span class="w">      </span><span class="n">_M_rightmost</span><span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__z</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">__y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">_M_leftmost</span><span class="p">())</span><span class="w"> </span><span class="c1">// y为最左节点</span>
</span><span class='line'><span class="w">      </span><span class="n">_M_leftmost</span><span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__z</span><span class="p">;</span><span class="w">  </span><span class="c1">// maintain _M_leftmost() pointing to min node</span>
</span><span class='line'><span class="w">  </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="n">__z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">_M_create_node</span><span class="p">(</span><span class="n">__v</span><span class="p">);</span><span class="w"> </span><span class="c1">// 创建新节点。???为什么不放到if-else上面???</span>
</span><span class='line'><span class="w">    </span><span class="n">_S_right</span><span class="p">(</span><span class="n">__y</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__z</span><span class="p">;</span><span class="w"> </span><span class="c1">// 新节点为y的右孩子</span>
</span><span class='line'><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">__y</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">_M_rightmost</span><span class="p">())</span><span class="w"> </span><span class="c1">// y为最右节点</span>
</span><span class='line'><span class="w">      </span><span class="n">_M_rightmost</span><span class="p">()</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__z</span><span class="p">;</span><span class="w"> </span><span class="c1">// maintain _M_rightmost() pointing to max node</span>
</span><span class='line'><span class="w">  </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="n">_S_parent</span><span class="p">(</span><span class="n">__z</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">__y</span><span class="p">;</span><span class="w"> </span><span class="c1">// 设定新节点的父节点</span>
</span><span class='line'><span class="w">  </span><span class="n">_S_left</span><span class="p">(</span><span class="n">__z</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="n">_S_right</span><span class="p">(</span><span class="n">__z</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="n">_Rb_tree_rebalance</span><span class="p">(</span><span class="n">__z</span><span class="p">,</span><span class="w"> </span><span class="n">_M_header</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">_M_parent</span><span class="p">);</span><span class="w"> </span><span class="c1">// 调整RB-tree使之恢复平衡</span>
</span><span class='line'><span class="w">  </span><span class="o">++</span><span class="n">_M_node_count</span><span class="p">;</span>
</span><span class='line'><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">iterator</span><span class="p">(</span><span class="n">__z</span><span class="p">);</span><span class="w"> </span><span class="c1">// 返回指向新节点的迭代器</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">至此新节点插入完成</span><span class="err">。</span><span class="n">然而</span><span class="err">，</span><span class="n">由于新节点的插入</span><span class="err">，</span><span class="n">可能会引起RB</span><span class="o">-</span><span class="n">tree的性质4</span><span class="p">,</span><span class="mi">5</span><span class="n">的破坏</span><span class="err">，</span><span class="n">需要对RB</span><span class="o">-</span><span class="n">tree进行旋转并对相关节点重新着色</span><span class="err">，</span><span class="n">这都是在</span><span class="w"> </span><span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">_Rb_tree_rebalance</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span><span class="w"> </span><span class="n">这个函数中实现的</span><span class="err">，</span><span class="n">下面就主要介绍RB</span><span class="o">-</span><span class="n">tree是如何恢复平衡</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="mf">4.2</span><span class="w"> </span><span class="n">调整RB</span><span class="o">-</span><span class="n">tree使之恢复平衡</span><span class="o">&lt;/</span><span class="n">h4</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">RB</span><span class="o">-</span><span class="n">tree的调整与AVL</span><span class="o">-</span><span class="n">tree类似但更复杂</span><span class="err">，</span><span class="n">因为不仅仅需要旋转</span><span class="err">，</span><span class="n">还需要考虑节点的颜色是否符合要求</span><span class="err">。</span><span class="n">破坏RB</span><span class="o">-</span><span class="n">tree性质4的可能起因是插入了一个红色节点</span><span class="err">、</span><span class="n">将一个黑色节点变为红色或者是旋转</span><span class="err">，</span><span class="n">而破坏性质5的可能原因是插入一个黑色的节点</span><span class="err">、</span><span class="n">节点颜色的改变</span><span class="err">（</span><span class="n">红变黑或黑变红</span><span class="err">）</span><span class="n">或者是旋转</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">在讨论</span><span class="w"> </span><span class="n">RB</span><span class="o">-</span><span class="n">tree</span><span class="w"> </span><span class="n">插入操作之前必须明白一点</span><span class="err">，</span><span class="n">那就是新插入的节点的颜色必为红色</span><span class="err">（</span><span class="n">调整前</span><span class="err">），</span><span class="n">因为插入黑点会增加某条路径上黑结点的数目</span><span class="err">，</span><span class="n">从而导致整棵树黑高度的不平衡</span><span class="err">。</span><span class="n">但如果新结点的父结点为红色时</span><span class="err">（</span><span class="n">如下图所示</span><span class="err">），</span><span class="n">将会违反红黑树的性质</span><span class="err">：</span><span class="n">一条路径上不能出现父子同为红色结点</span><span class="err">。</span><span class="n">这时就需要通过一系列操作来使红黑树保持平衡</span><span class="err">。</span><span class="n">为了清楚地表示插入操作以下在结点中使用</span><span class="err">“</span><span class="n">N</span><span class="err">”</span><span class="n">字表示一个新插入的结点</span><span class="err">，</span><span class="n">使用</span><span class="err">“</span><span class="n">P</span><span class="err">”</span><span class="n">字表示新插入点的父结点</span><span class="err">，</span><span class="n">使用</span><span class="err">“</span><span class="n">U</span><span class="err">”</span><span class="n">字表示</span><span class="err">“</span><span class="n">P</span><span class="err">”</span><span class="n">结点的兄弟结点</span><span class="err">，</span><span class="n">使用</span><span class="err">“</span><span class="n">G</span><span class="err">”</span><span class="n">字表示</span><span class="err">“</span><span class="n">P</span><span class="err">”</span><span class="n">结点的父结点</span><span class="err">。</span><span class="n">插入操作分为以下几种情况</span><span class="err">：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">1</span><span class="err">）、</span><span class="n">树为空</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">此时</span><span class="err">，</span><span class="n">新插入节点为根节点</span><span class="err">，</span><span class="n">上面说过新插入节点均为红色</span><span class="err">，</span><span class="n">这不符合RB</span><span class="o">-</span><span class="n">tree的性质2</span><span class="err">，</span><span class="n">只需要将新节点重新改为黑色即可</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">2</span><span class="err">）、</span><span class="n">黑父</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">如果新节点的父结点为黑色结点</span><span class="err">，</span><span class="n">那么插入一个红点将不会影响红黑树的平衡</span><span class="err">，</span><span class="n">此时插入操作完成</span><span class="err">。</span><span class="n">红黑树比AVL树优秀的地方之一在于黑父的情况比较常见</span><span class="err">，</span><span class="n">从而使红黑树需要旋转的几率相对AVL树来说会少一些</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">3</span><span class="err">）、</span><span class="n">红父</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">这种情况就比较复杂</span><span class="err">。</span><span class="n">由于父节点为红</span><span class="err">，</span><span class="n">所以祖父节点必为黑色</span><span class="err">。</span><span class="n">由于新节点和父节点均为红</span><span class="err">，</span><span class="n">所以需要重新着色或进行旋转</span><span class="err">，</span><span class="n">此时就需要考虑叔父节点的颜色</span><span class="err">，</span><span class="n">进而可能需要考虑祖父</span><span class="err">、</span><span class="n">祖先节点的颜色</span><span class="err">。</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mf">3.1</span><span class="err">）、</span><span class="n">叔父为红</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">只要将父和叔结点变为黑色</span><span class="err">，</span><span class="n">将祖父结点变为红色即可</span><span class="err">，</span><span class="n">如下图所示</span><span class="err">：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span><span class="w"> </span><span class="n">img</span><span class="w"> </span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="mi">2014</span><span class="o">/</span><span class="n">IMAG2014080303</span><span class="p">.</span><span class="n">png</span><span class="o">%</span><span class="p">}</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">但由于祖父结点的父结点有可能为红色</span><span class="err">，</span><span class="n">从而违反红黑树性质</span><span class="err">。</span><span class="n">此时必须将祖父结点作为新的判定点</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">继续向上</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">（</span><span class="n">迭代</span><span class="err">）</span><span class="n">进行平衡操作</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mf">3.2</span><span class="err">）、</span><span class="n">叔父为黑</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">当叔父结点为黑色时</span><span class="err">，</span><span class="n">需要进行旋转</span><span class="err">，</span><span class="n">有4中情况</span><span class="err">（</span><span class="n">类似AVL</span><span class="err">），</span><span class="n">以下图示了所有的旋转可能</span><span class="err">：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span><span class="w"> </span><span class="n">img</span><span class="w"> </span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="mi">2014</span><span class="o">/</span><span class="n">IMAG2014080304</span><span class="p">.</span><span class="n">png</span><span class="o">%</span><span class="p">}</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">可以观察到</span><span class="err">，</span><span class="n">当旋转完成后</span><span class="err">，</span><span class="n">新的旋转根全部为黑色</span><span class="err">，</span><span class="n">此时不需要再向上回溯进行平衡操作</span><span class="err">，</span><span class="n">插入操作完成</span><span class="err">。</span><span class="n">篇幅原因</span><span class="err">，</span><span class="n">相关代码这里就不粘贴出来了</span><span class="err">，</span><span class="n">要注意的一点就是case1和case2的变色方案是一样的</span><span class="err">，</span><span class="n">虽然从上图中看一个是P由红变黑</span><span class="err">，</span><span class="n">一个是N由红变黑</span><span class="err">，</span><span class="n">但实际上在case2中</span><span class="err">，</span><span class="n">经过一次旋转后</span><span class="err">，</span><span class="n">迭代器所指向的节点已经发生改变</span><span class="err">，</span><span class="n">这样刚好使得这两个case的变色方案相同</span><span class="err">，</span><span class="n">均为P由红变黑而G由黑变红</span><span class="err">。</span><span class="n">case3与case4的变色方案也是类似的</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="mf">5.</span><span class="w"> </span><span class="n">RB</span><span class="o">-</span><span class="n">tree的删除操作</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">相比于插入操作</span><span class="err">，</span><span class="n">RB</span><span class="o">-</span><span class="n">tree的删除操作更加复杂</span><span class="err">。</span><span class="n">在侯捷的书上并没有讲删除操作</span><span class="err">，</span><span class="n">而在算法导论上是有专门的一节内容的</span><span class="err">，</span><span class="n">wiki上也有详细的讲述</span><span class="err">。</span><span class="n">限于篇幅</span><span class="err">，</span><span class="n">这里指讲解一个大概的思路</span><span class="err">，</span><span class="n">更详细的介绍请参见wiki或算法导论</span><span class="err">。</span><span class="n">RB</span><span class="o">-</span><span class="n">tree删除操作的基本思路是这样的</span><span class="err">，</span><span class="n">首先按照一般的二叉搜索树进行节点的删除</span><span class="err">，</span><span class="n">然后对RB</span><span class="o">-</span><span class="n">tree相关节点进行变色或旋转</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">一般的二叉搜索树删除节点的基本思路是</span><span class="err">：</span><span class="n">首先找到待删除节点位置</span><span class="err">，</span><span class="n">设为D</span><span class="err">。</span><span class="n">如果D同时有左右子树</span><span class="err">，</span><span class="n">那么用D的后继</span><span class="err">（</span><span class="n">右孩子的最左子节点</span><span class="err">，</span><span class="n">该后继最多有一个子节点</span><span class="err">——</span><span class="n">右孩子</span><span class="err">）</span><span class="n">替代D</span><span class="err">（</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">注意</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">：</span><span class="n">这里的替代是只key的替代</span><span class="err">，</span><span class="n">color不变</span><span class="err">，</span><span class="n">仍为D的color</span><span class="err">），</span><span class="n">从而将删除位置转移到该后继节点</span><span class="err">（</span><span class="n">成为新的D</span><span class="err">，</span><span class="n">为叶子节点或只有右孩子</span><span class="err">）。</span><span class="n">于是</span><span class="err">，</span><span class="n">我们只需要讨论删除只有一个儿子的节点的情况</span><span class="p">(</span><span class="n">如果它两个儿子都为空</span><span class="err">，</span><span class="n">即均为叶子</span><span class="err">，</span><span class="n">我们任意将其中一个看作它的儿子</span><span class="p">)</span><span class="err">，</span><span class="n">设这个儿子节点为N</span><span class="err">，</span><span class="n">这仍然需要分三种情况</span><span class="err">：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">1</span><span class="err">）</span><span class="n">D为红</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">这种情况比较简单</span><span class="err">。</span><span class="n">由于D为红色</span><span class="err">，</span><span class="n">所以它的父亲和儿子一定是黑色的</span><span class="err">，</span><span class="n">我们可以简单的用它的黑色儿子替换它</span><span class="err">，</span><span class="n">并不会破坏性质3和性质4</span><span class="err">。</span><span class="n">通过被删除节点的所有路径只是少了一个红色节点</span><span class="err">，</span><span class="n">这样可以继续保证性质5</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="w">  </span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">2</span><span class="err">）</span><span class="n">D为黑且N为红</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">如果只是去除这个黑色节点</span><span class="err">，</span><span class="n">用它的红色儿子顶替上来的话</span><span class="err">，</span><span class="n">会破坏性质5</span><span class="err">，</span><span class="n">可能会破坏性质4</span><span class="err">，</span><span class="n">但是如果我们重绘它的儿子为黑色</span><span class="err">，</span><span class="n">则曾经通过它的所有路径将通过它的黑色儿子</span><span class="err">，</span><span class="n">这样可以继续保持性质5</span><span class="err">，</span><span class="n">同时也满足性质4</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mi">3</span><span class="err">）</span><span class="n">D为黑且N为黑</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">这是一种复杂的情况</span><span class="err">。</span><span class="n">我们首先把要删除的节点D替换为它的</span><span class="err">（</span><span class="n">右</span><span class="err">）</span><span class="n">儿子N</span><span class="err">，</span><span class="n">在新树中</span><span class="err">（</span><span class="n">D被N覆盖</span><span class="err">），</span><span class="n">设N的父节点为P</span><span class="err">，</span><span class="n">兄弟为S</span><span class="err">，</span><span class="n">SL为S的左儿子</span><span class="err">，</span><span class="n">SR为S的右儿子</span><span class="err">。</span><span class="n">此时</span><span class="err">，</span><span class="n">以N为根节点的子树的黑高度减少了一</span><span class="err">，</span><span class="n">与S为根节点的子树的黑高度不一致</span><span class="err">，</span><span class="n">破坏了性质5</span><span class="err">。</span><span class="n">为了恢复</span><span class="err">，</span><span class="n">可以分为如下情形</span><span class="err">：</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mf">3.1</span><span class="err">）</span><span class="n">N为根节点</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">已经满足所有性质</span><span class="err">，</span><span class="n">不需要调整</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mf">3.2</span><span class="err">）</span><span class="w"> </span><span class="n">N是它父亲P的左儿子</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">case1</span><span class="err">、</span><span class="n">S为红色</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">：</span><span class="n">将P改为红色</span><span class="err">，</span><span class="n">S改为黑色</span><span class="err">，</span><span class="n">以P为中心左旋</span><span class="err">，</span><span class="n">旋转后</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">SL为新的S</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">，</span><span class="n">SL和SR是新的S的左右孩子</span><span class="err">，</span><span class="n">此时case1就转化为了case2或case3或case4</span><span class="err">；</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">注</span><span class="err">：</span><span class="n">case2</span><span class="o">~</span><span class="mi">4</span><span class="n">中S均为黑色</span><span class="err">（</span><span class="n">否则是case1</span><span class="err">）。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">case2</span><span class="err">、</span><span class="n">SL</span><span class="err">、</span><span class="n">SR同为黑色</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">：</span><span class="n">将S改为红色</span><span class="err">，</span><span class="n">这样黑高度失衡的节点变为P</span><span class="err">，</span><span class="n">转到3</span><span class="mf">.1</span><span class="err">）</span><span class="n">重新开始判断和调整</span><span class="err">；</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">case3</span><span class="err">、</span><span class="n">SR为黑</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">：</span><span class="n">此时SL为红</span><span class="err">（</span><span class="n">否则是case2</span><span class="err">）。</span><span class="n">将S改为红色</span><span class="err">，</span><span class="n">SL改为黑色</span><span class="err">，</span><span class="n">然后以S为中心右旋</span><span class="err">，</span><span class="n">旋转后SL为新的S</span><span class="err">，</span><span class="n">而原S成为SR且为红色</span><span class="err">，</span><span class="n">这就将case3变成了case4</span><span class="err">；</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">case4</span><span class="err">、</span><span class="n">SR为红</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">：</span><span class="n">以P为中心左旋</span><span class="err">，</span><span class="n">然后交换P和S的颜色</span><span class="err">，</span><span class="n">最后将SR改为黑色</span><span class="err">，</span><span class="n">即可完成调整</span><span class="err">。</span><span class="n">可以看到调整过程与SL的颜色无关</span><span class="err">。</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="mf">3.3</span><span class="err">）</span><span class="n">N是它父亲P的右儿子</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">与3</span><span class="mf">.2</span><span class="err">）</span><span class="n">类似</span><span class="err">，</span><span class="n">这里就不详细展开了</span><span class="err">。</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="mf">6.</span><span class="w"> </span><span class="n">RB</span><span class="o">-</span><span class="n">tree的查询操作</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">RB</span><span class="o">-</span><span class="n">tree是一个二叉搜索树</span><span class="err">，</span><span class="n">元素的查询是其拿手项目</span><span class="err">，</span><span class="n">非常简单</span><span class="err">，</span><span class="n">以下是RB</span><span class="o">-</span><span class="n">tree提供的查询操作</span><span class="err">：</span>
</span></code></pre></td></tr></table></div></figure> cpp
template <class _Key, class _Value, class _KeyOfValue, class _Compare, class _Alloc>
typename <em>Rb_tree&lt;</em>Key,<em>Value,</em>KeyOfValue,<em>Compare,</em>Alloc>::iterator
<em>Rb_tree&lt;</em>Key,<em>Value,</em>KeyOfValue,<em>Compare,</em>Alloc>::find(const <em>Key&amp; __k) {
  </em>Link_type <strong>y = _M_header;      // Last node which is not less than </strong>k.
  <em>Link_type __x = </em>M_root();      // Current node.</p>

<p>  while (<strong>x != 0) // x为NIL时推出循环
    if (!<em>M_key_compare(</em>S_key(</strong>x), <strong>k))
      </strong>y = <strong>x, </strong>x = <em>S_left(<strong>x); // 往左子树找（赋值运算优先于逗号运算，y是x的父节点）
    else
      </strong>x = </em>S_right(__x); // 往右子树找</p>

<p>  iterator <strong>j = iterator(</strong>y); <br/>
  return (<strong>j == end() || _M_key_compare(</strong>k, <em>S_key(__j.</em>M_node))) ?
     end() : __j; // 没找到返回end()，否则返回相应节点的指针（迭代器）
}
```</p>

<h2>小结</h2>

<p>关于RB-tree基本就介绍到这里了，主要是RB-tree的定义、数据结构、插入删除和查找等基本操作，其中最主要也最困难的就是插入和删除操作中恢复平衡的方法。另外，还介绍了二叉搜索树的基本概念和高度平衡的AVL树，可以看到，AVL树保持平衡的方法非常简单易懂，而RB-tree由于引入了节点的颜色属性，使得理解起来相对比较困难，那么问题就来了，为什么不用AVL-tree而用RB-tree作为set和map的低层容器呢？<br/>
这个问题要问STL的实现者了，其实AVL-tree和RB-tree的平均性能在 <a href="http://en.wikipedia.org/wiki/AVL_tree">AVL-tree的wiki</a> _上是有严格的数学公式的，AVL的平均高度为 $1.44logN$ ，而RB-tree的平均高度为 $2logN$ ，这些数据的来历也有相关的论文，感兴趣的可以更深入的看看。</p>
]]></content>
  </entry>
  
</feed>