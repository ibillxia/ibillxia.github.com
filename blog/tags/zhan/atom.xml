<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 栈 | Bill's Blog]]></title>
  <link href="http://ibillxia.github.io/blog/tags/zhan/atom.xml" rel="self"/>
  <link href="http://ibillxia.github.io/"/>
  <updated>2025-06-01T13:56:45+08:00</updated>
  <id>http://ibillxia.github.io/</id>
  <author>
    <name><![CDATA[Bill Xia]]></name>
    <email><![CDATA[ibillxia@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入理解STL源码(3.3) 序列式容器之deque和stack、queue]]></title>
    <link href="http://ibillxia.github.io/blog/2014/07/13/stl-source-insight-3-sequential-containers-3-deque-and-stack-queue/"/>
    <updated>2014-07-13T20:46:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2014/07/13/stl-source-insight-3-sequential-containers-3-deque-and-stack-queue</id>
    <content type="html"><![CDATA[<p>本文涉及到 SGI STL 源码的文件有<code>deque</code>、<code>stl_deque.h</code>、<code>deque.h</code>、<code>stack</code>、<code>stl_stack.h</code>、<code>queue</code>、<code>stl_queue.h</code> 等几个文件。</p>

<h2>1. deque 概述</h2>

<p>前面分别介绍了连续式存储的序列容器vector和以节点为单位链接起来的非连续存储的序列容器list，这两者各有优缺点，而且刚好是优缺互补的，那么何不将二者结合利用对方的优点来弥补己方的不足呢，于是这就有了强大的deque。</p>

<p>没错，与我们在数据结构中学到的固定连续空间的双端队列不同，STL中的deque是分段连续的空间通过list链接而成的序列容器，它结合了vector与list的存储特性，但与vector和list都不同的是deque只能在首部或尾部进行插入和删除操作，这个限制在一定程度上简化了deque实现的难度。由于使用分段连续空间链接的方式，所以deque不存在vector那样“因旧空间不足而重新配置新的更大的空间，然后复制元素，再释放原空间”的情形，也不会有list那样每次都只配置一个元素的空间而导致时间性能和空间的利用率低下。</p>

<h2>2. deque 的数据结构</h2>

<p>deque由一段一段连续空间串接而成，一旦有必要在deque的头部或尾端增加新的空间，便配置一段定量连续的空间，串接在deque的头部或尾端。deque的最大任务，就是在这些分段连续的空间上维护其整体连续的假象，并提供随机存取的接口。deque采用一块所谓的map（注意：不是STL中map容器，而是类似于vector）作为主控（为什么不使用list呢？），这块map是一个连续空间，其中每个元素都是一个指针，指向一段连续的空间，称为缓冲区，它才是deque的真正存储空间。SGI中允许指定缓冲区的大小，默认是512字节。除此之外，还有start和finish两个指针，分别指向第一个缓冲区的第一个元素和最后一个缓冲区的最后一个元素。其数据结构如下：<br/>
<code>cpp
inline size_t __deque_buf_size(size_t __size) { // 计算缓冲区的大小
  return __size &lt; 512 ? size_t(512 / __size) : size_t(1);
}
template &lt;class _Tp, class _Alloc&gt; class _Deque_base {
protected:
  _Tp** _M_map; // 指向缓冲区的指针数组首地址
  size_t _M_map_size;  // 指向缓冲区的指针数组的大小
  iterator _M_start; // 指向第一个缓冲区的第一个元素
  iterator _M_finish; // 指向最后一个缓冲区的最后一个元素
};
class deque : protected _Deque_base&lt;_Tp, _Alloc&gt; {
protected:  // Internal typedefs
  typedef pointer* _Map_pointer;
  static size_t _S_buffer_size() { return __deque_buf_size(sizeof(_Tp)); }
};
</code></p>

<!-- more -->


<h2>3. deque 的配置器</h2>

<p>由于deque涉及到两种类型（map和buffer）数据的空间配置，因此deque定义了两个专属的配置器 <code>_Map_alloc_type</code> 和 <code>_Node_alloc_type</code>:<br/>
<code>cpp
template &lt;class _Tp, class _Alloc&gt; class _Deque_base {
protected:
  typedef simple_alloc&lt;_Tp, _Alloc&gt;  _Node_alloc_type;
  typedef simple_alloc&lt;_Tp*, _Alloc&gt; _Map_alloc_type;
};
template &lt;class _Tp, class _Alloc = __STL_DEFAULT_ALLOCATOR(_Tp) &gt;
class deque : protected _Deque_base&lt;_Tp, _Alloc&gt; { };
</code>
而这里的 <code>_Alloc</code> 使用的都是STL默认的 <code>alloc</code> 这个配置器，因此这两个配置器实际上都是 <code>alloc</code> 类型的配置器，即SGI的第二级配置器。<br/>
在定义一个deque时，默认调用基类的构造函数，产生一个map大小为0的空的deque，随着第一次插入元素，由于map大小不够，需要调用<code>_M_push_back_aux</code> 进而调用 <code>_M_reallocate_map</code> 进行map的空间配置，如果初始的map不为空，还需要对map进行“分配新空间，复制，释放元空间”的操作，如果从头部插入同样的道理，这是就是map的配置逻辑（实际中，还有一种情况，就是map的前后剩余的node数不同，例如前部分都空着，而后面插入后溢出了，这时可以考虑在map内部移动，即将后半部分整体往前移动一定距离）。其中<code>_M_reallocate_map</code>的实现如下：<br/>
<code>cpp
template &lt;class _Tp, class _Alloc&gt;
void deque&lt;_Tp,_Alloc&gt;::_M_reallocate_map(size_type __nodes_to_add, bool __add_at_front){
  size_type __old_num_nodes = _M_finish._M_node - _M_start._M_node + 1;
  size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
  _Map_pointer __new_nstart;
  if (_M_map_size &gt; 2 * __new_num_nodes) { // map的size足够，在map内部移动
    __new_nstart = _M_map + (_M_map_size - __new_num_nodes) / 2 + (__add_at_front ? __nodes_to_add : 0);
    if (__new_nstart &lt; _M_start._M_node)
      copy(_M_start._M_node, _M_finish._M_node + 1, __new_nstart);
    else
      copy_backward(_M_start._M_node, _M_finish._M_node + 1, __new_nstart + __old_num_nodes);
  } else { // map的size不够，重新分配
    size_type __new_map_size = _M_map_size + max(_M_map_size, __nodes_to_add) + 2;
    _Map_pointer __new_map = _M_allocate_map(__new_map_size); // 重新分配map
    __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2 + (__add_at_front ? __nodes_to_add : 0);
    copy(_M_start._M_node, _M_finish._M_node + 1, __new_nstart); // 复制原map到新的map中
    _M_deallocate_map(_M_map, _M_map_size); // 释放原map
    _M_map = __new_map;
    _M_map_size = __new_map_size;
  }
  _M_start._M_set_node(__new_nstart);
  _M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
}
</code>
那么每个连续的缓冲区buffer（或node）是在什么时候配置呢？它是在map中实际使用到的最后一个node不够用时但map还可以继续在这个node后面加入node时（即map非满而node满时），在 <code>_M_push_back_aux</code> 中调用 <code>_M_allocate_node</code> 来分配，相关函数都比较简单，这里就不贴了。<br/>
以上主要是空间分配相关的，那么在 <code>pop</code> 的时候，空间的释放又是怎样的呢？这里也需要判断是否当前node全部被 <code>pop</code> 了，如果是的则需要释放这个node所占用的空间。如下：<br/>
<code>cpp
void pop_back() { // deque内部实现的成员函数，inline的
    if (_M_finish._M_cur != _M_finish._M_first) { // 整个node还没有pop完
      --_M_finish._M_cur;
      destroy(_M_finish._M_cur); // 析构当前元素
    } else  _M_pop_back_aux();
}
template &lt;class _Tp, class _Alloc&gt;
void deque&lt;_Tp,_Alloc&gt;::_M_pop_back_aux() { // 整个node被pop完了的情况
  _M_deallocate_node(_M_finish._M_first); // 释放整个node的空间
  _M_finish._M_set_node(_M_finish._M_node - 1); // node前移
  _M_finish._M_cur = _M_finish._M_last - 1; // 当前元素为最后一个node的最后一个元素
  destroy(_M_finish._M_cur); // 释放当前元素
}
</code></p>

<h2>4. deque 的迭代器</h2>

<p>deque是分段连续空间，前面也提到了deque使用的是Bidirectional Iterators，因此deque的迭代器主要需要实现<code>operator++</code>和<code>operator--</code>。要实现这两个操作，需要考虑当前指针是否处于buffer的头/尾，如果在buffer的头部而需要前移（或尾部需要后移），就需要将buffer往前/后移一个，在SGI中是通过调用 <code>_M_set_node</code> 来实现的。具体代码如下：<br/>
<code>cpp
template &lt;class _Tp, class _Ref, class _Ptr&gt; struct _Deque_iterator {
  typedef _Tp** _Map_pointer;
  _Tp* _M_cur; // 几个成员变量
  _Tp* _M_first;
  _Tp* _M_last;
  _Map_pointer _M_node;
  _Self&amp; operator++() { // ++ 操作符重载，后移
    ++_M_cur;
    if (_M_cur == _M_last) { // 到了buffer的最后一个
      _M_set_node(_M_node + 1); // 将当前node指针_M_node指向下一个node
      _M_cur = _M_first; // 当前指针指向新node的第一个元素
    }
    return *this;
  }
  void _M_set_node(_Map_pointer __new_node) {
    _M_node = __new_node; // map pointer后移
    _M_first = *__new_node; // first指向新node
    _M_last = _M_first + difference_type(_S_buffer_size()); // last指向下一个node
  }
};
</code>
使用 <code>--</code> 操作符向前移动的同理，这里就不赘述了。</p>

<h2>5. deque 的常用操作</h2>

<p>deque中最常用的莫过于 <code>push</code> 和 <code>pop</code> 操作了，这些操作在前面的空间配置中基本已经介绍了，这里就主要介绍一下 <code>clear</code>、 <code>erase</code> 和 <code>insert</code> 操作吧。<br/>
<strong>（1）clear</strong><br/>
该函数的作用是清除整个deque，释放所有空间而只保留一个缓冲区：<br/>
<code>cpp
template &lt;class _Tp, class _Alloc&gt; void deque&lt;_Tp,_Alloc&gt;::clear() {
  for (_Map_pointer __node = _M_start._M_node + 1; __node &lt; _M_finish._M_node; ++__node) { // 从第二个node开始，遍历每个缓冲区（node）
    destroy(*__node, *__node + _S_buffer_size()); // 析构每个元素
    _M_deallocate_node(*__node); // 释放缓冲区
  }
  if (_M_start._M_node != _M_finish._M_node) { // 还剩下头尾两个node
    destroy(_M_start._M_cur, _M_start._M_last); // 析构头node中的每个元素
    destroy(_M_finish._M_first, _M_finish._M_cur); // 析构尾node中的每个元素
    _M_deallocate_node(_M_finish._M_first); // 释放尾node的空间
  } else destroy(_M_start._M_cur, _M_finish._M_cur); // 只有一个node，析构这个node中的所有元素
  _M_finish = _M_start;
}
</code>
<strong>（2）erase</strong><br/>
该函数的作用是清除 [first,last) 间的所有元素：<br/>
<code>cpp
typename deque&lt;_Tp,_Alloc&gt;::iterator
deque&lt;_Tp,_Alloc&gt;::erase(iterator __first, iterator __last) {
  if (__first == _M_start &amp;&amp; __last == _M_finish) { // erase 所有元素，直接调用clear
    clear();
    return _M_finish;
  } else { // erase 部分元素
    difference_type __n = __last - __first; // 待擦出的区间长度
    difference_type __elems_before = __first - _M_start; // 擦出区间前的元素个数
    if (__elems_before &lt; difference_type((this-&gt;size() - __n) / 2)) { // 前面的元素个个数小于擦除后剩余总数的一半，将这部分后移
      copy_backward(_M_start, __first, __last); // 后移
      iterator __new_start = _M_start + __n;
      destroy(_M_start, __new_start);
      _M_destroy_nodes(__new_start._M_node, _M_start._M_node);
      _M_start = __new_start;
    } else { // 前面剩余的元素较多，将后面的前移
      copy(__last, _M_finish, __first); // 前移
      iterator __new_finish = _M_finish - __n;
      destroy(__new_finish, _M_finish);
      _M_destroy_nodes(__new_finish._M_node + 1, _M_finish._M_node + 1);
      _M_finish = __new_finish;
    }
    return _M_start + __elems_before;
  }
}
</code>
<strong>（3）insert</strong><br/>
该函数的作用是在某个位置插入一个元素：<br/>
<code>cpp
iterator insert(iterator position, const value_type&amp; __x) {
  if (position._M_cur == _M_start._M_cur) { // 在头部插入，用push_front
    push_front(__x);
    return _M_start;
  } else if (position._M_cur == _M_finish._M_cur) { // 在尾部插入
    push_back(__x);
    iterator __tmp = _M_finish;
    --__tmp;
    return __tmp; // 返回插入位置
  } else { // 在中间插入
    return _M_insert_aux(position, __x);
  }
}
deque&lt;_Tp,_Alloc&gt;::_M_insert_aux(iterator __pos, const value_type&amp; __x) {
  difference_type __index = __pos - _M_start; // 插入点之前的元素个数
  value_type __x_copy = __x;
  if (size_type(__index) &lt; this-&gt;size() / 2) { // 前面的元素个数较小
    push_front(front()); // 在头部插入与头部相同的元素，然后从第二个元素开始到插入位置整体前移一步
    iterator __front1 = _M_start; ++__front1;
    iterator __front2 = __front1; ++__front2;
    __pos = _M_start + __index;
    iterator __pos1 = __pos; ++__pos1;
    copy(__front2, __pos1, __front1);
  } else { // 插入点后面的元素较少，从后面插入，然后插入点到尾部整体往后移一步
    push_back(back());
    iterator __back1 = _M_finish; --__back1;
    iterator __back2 = __back1;  --__back2;
    __pos = _M_start + __index;
    copy_backward(__pos, __back2, __back1);
  }
  *__pos = __x_copy;
  return __pos;
}
</code>
deque原本只能在头部或尾部插入元素的，提供了insert之后，就可以任何位置插入元素了。</p>

<h2>6. 基于deque 的 stack 和 queue</h2>

<p>由于deque可以从首位两端插入或剔除元素，所以只需要对其进行简单的封装就可以分别实现先进先出（FIFO）的stack和先进后出（FILO）的queue了。stack和queue中都有一个deque类型的成员，用做数据存储的容器，然后对deque的部分接口进行简单的封装，例如stack只提供从末端插入和删除的接口以及获取末端元素的接口，而queue则只提供从尾部插入而从头部删除的接口以及获取首位元素的接口。像这样具有“修改某物接口，形成另一种风貌”的性质的，称为配接器（adapter），因此STL中stack和queue往往不被归类为容器（container），而被归类为容器配接器（container adapter）。（关于配接器后面文章还会具体介绍）<br/>
下面只给出stack的基本实现，并加以注解。<br/>
<code>cpp
template &lt;class _Tp, class _Sequence __STL_DEPENDENT_DEFAULT_TMPL(deque&lt;_Tp&gt;) &gt;
class stack; // 原型声明
template &lt;class _Tp, class _Sequence&gt; class stack {
protected:
  _Sequence c; // _Sequence为deque&lt;_Tp&gt;，c为实际存储数据的容器
public: // 向外部提供的接口，都是调用deque的接口来实现的
  stack() : c() {}
  explicit stack(const _Sequence&amp; __s) : c(__s) {}
  bool empty() const { return c.empty(); }
  size_type size() const { return c.size(); }
  reference top() { return c.back(); }
  const_reference top() const { return c.back(); }
  void push(const value_type&amp; __x) { c.push_back(__x); }
  void pop() { c.pop_back(); }
};
</code>
值得一提的是，stack和queue都没有迭代器，因此不能对stack或queue进行遍历。但他们提供了 <code>operator ==</code> 和 <code>operator&lt;</code> 这两个比较大小的操作符：<br/>
<code>cpp
template &lt;class _Tp, class _Seq&gt;
bool operator==(const stack&lt;_Tp,_Seq&gt;&amp; __x, const stack&lt;_Tp,_Seq&gt;&amp; __y) {
  return __x.c == __y.c;
}
template &lt;class _Tp, class _Seq&gt;
bool operator&lt;(const stack&lt;_Tp,_Seq&gt;&amp; __x, const stack&lt;_Tp,_Seq&gt;&amp; __y) {
  return __x.c &lt; __y.c;
}
</code>
另外，除了使用默认的deque作为stack和queue的容器之外，我们还可以使用list或其他自定义的容器，只需要实现了stack或queue需要的接口，使用方法很简单：<br/>
<code>cpp
stack&lt;int,vector&lt;int&gt; &gt; ist;
queue&lt;char,list&lt;char&gt; &gt; cq;
</code>
即只需要指定模板中第二个参数即可。<br/>
关于deque的内容就介绍到这里了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[06年浙大复试机试题解]]></title>
    <link href="http://ibillxia.github.io/blog/2012/03/02/06-zju-program-test-solution/"/>
    <updated>2012-03-02T12:12:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2012/03/02/06-zju-program-test-solution</id>
    <content type="html"><![CDATA[<p>
06年浙大研究生复试机试题解
</p>




<h3>A题：还是A+B（hdoj1229）（九度1015）</h3>


<p>水题，简直水得不能再水</p>


<p><figure class='code'><figcaption><span>Problem A </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span></span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="w"> </span><span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="w"> </span><span class="o">&lt;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span><span class="w"> </span><span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">a</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">b</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="n">t</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">k</span><span class="o">--</span><span class="p">)</span><span class="n">t</span><span class="o">*=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">%</span><span class="n">t</span><span class="o">==</span><span class="n">b</span><span class="o">%</span><span class="n">t</span><span class="p">)</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="mi">-1</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="k">else</span><span class="w"> </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<!-- more -->


<h3>B题：火星A+B（hdoj1230）（九度1016）</h3>


<p>不是很难，注意判断输出的首位是否为零，如果为零，就不要输出（除非结果为0）。
虽然不难，但九度居然将其标为五星题，表示很费解。
代码如下：
</p>


<p><figure class='code'><figcaption><span>Problem B </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span></span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span><span class="w"> </span><span class="n">d</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">29</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">37</span><span class="p">,</span><span class="mi">41</span><span class="p">,</span><span class="mi">43</span><span class="p">,</span><span class="mi">47</span><span class="p">,</span><span class="mi">53</span><span class="p">,</span><span class="mi">59</span><span class="p">,</span><span class="mi">61</span><span class="p">,</span><span class="mi">67</span><span class="p">,</span><span class="mi">71</span><span class="p">,</span><span class="mi">73</span><span class="p">,</span><span class="mi">79</span><span class="p">,</span><span class="mi">83</span><span class="p">,</span><span class="mi">89</span><span class="p">,</span><span class="mi">97</span><span class="p">,</span><span class="mi">101</span><span class="p">};</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="p">[</span><span class="mi">25</span><span class="p">],</span><span class="n">b</span><span class="p">[</span><span class="mi">25</span><span class="p">],</span><span class="n">c</span><span class="p">[</span><span class="mi">26</span><span class="p">],</span><span class="n">al</span><span class="p">,</span><span class="n">bl</span><span class="p">,</span><span class="n">t</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="n">al</span><span class="o">=</span><span class="n">bl</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">a</span><span class="o">+</span><span class="n">al</span><span class="o">++</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getchar</span><span class="p">()</span><span class="o">!=</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">b</span><span class="o">+</span><span class="n">bl</span><span class="o">++</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">getchar</span><span class="p">()</span><span class="o">==</span><span class="sc">&#39;,&#39;</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">al</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">bl</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="w">            </span><span class="n">al</span><span class="o">--</span><span class="p">;</span><span class="n">bl</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="w">            </span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">al</span><span class="p">]</span><span class="o">+</span><span class="n">b</span><span class="p">[</span><span class="n">bl</span><span class="p">]</span><span class="o">+</span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">])</span><span class="o">/</span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">al</span><span class="p">]</span><span class="o">+</span><span class="n">b</span><span class="p">[</span><span class="n">bl</span><span class="p">]</span><span class="o">+</span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">])</span><span class="o">%</span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">t</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">al</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="w">            </span><span class="n">al</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="w">            </span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">al</span><span class="p">]</span><span class="o">+</span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">])</span><span class="o">/</span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">al</span><span class="p">]</span><span class="o">+</span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">])</span><span class="o">%</span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">t</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">bl</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="w">            </span><span class="n">bl</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="w">            </span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">bl</span><span class="p">]</span><span class="o">+</span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">])</span><span class="o">/</span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">bl</span><span class="p">]</span><span class="o">+</span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">])</span><span class="o">%</span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">t</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="n">t</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">t</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="w">            </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d,&quot;</span><span class="p">,</span><span class="n">c</span><span class="p">[</span><span class="n">t</span><span class="o">--</span><span class="p">]);</span>
</span><span class='line'><span class="w">        </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>C题：还是畅通工程（hdoj1233）（九度1017）</h3>


<p>模板题，prim算法，代码如下：</p>


<p><figure class='code'><figcaption><span>Problem C </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span></span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="w"> </span><span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="w"> </span><span class="o">&lt;</span><span class="n">memory</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span><span class="w"> </span><span class="n">INF</span><span class="w"> </span><span class="mh">0x7fffffff</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="n">d</span><span class="p">[</span><span class="mi">100</span><span class="p">][</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="nf">prim</span><span class="p">(){</span>
</span><span class='line'><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">t</span><span class="p">,</span><span class="n">sum</span><span class="p">,</span><span class="n">min</span><span class="p">,</span><span class="n">vis</span><span class="p">[</span><span class="mi">100</span><span class="p">],</span><span class="n">low</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="w">    </span><span class="n">memset</span><span class="p">(</span><span class="n">vis</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">vis</span><span class="p">));</span>
</span><span class='line'><span class="w">    </span><span class="n">vis</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="n">low</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">INF</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="n">low</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="w">    </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="n">t</span><span class="o">=</span><span class="mi">-1</span><span class="p">;</span><span class="n">min</span><span class="o">=</span><span class="n">INF</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">vis</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="n">min</span><span class="o">&gt;</span><span class="n">low</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
</span><span class='line'><span class="w">                </span><span class="n">t</span><span class="o">=</span><span class="n">j</span><span class="p">;</span><span class="n">min</span><span class="o">=</span><span class="n">low</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="n">vis</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="n">sum</span><span class="o">+=</span><span class="n">min</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">n</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">vis</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">low</span><span class="p">[</span><span class="n">j</span><span class="p">]){</span>
</span><span class='line'><span class="w">                </span><span class="n">low</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">d</span><span class="p">[</span><span class="n">t</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">from</span><span class="p">,</span><span class="n">to</span><span class="p">,</span><span class="n">dis</span><span class="p">,</span><span class="n">min</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="n">n</span><span class="p">)</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">INF</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="n">j</span><span class="o">=</span><span class="p">(</span><span class="n">n</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="mi">-1</span><span class="p">))</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">j</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'><span class="w">            </span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">from</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">to</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">dis</span><span class="p">);</span>
</span><span class='line'><span class="w">            </span><span class="n">d</span><span class="p">[</span><span class="n">from</span><span class="mi">-1</span><span class="p">][</span><span class="n">to</span><span class="mi">-1</span><span class="p">]</span><span class="o">=</span><span class="n">d</span><span class="p">[</span><span class="n">to</span><span class="mi">-1</span><span class="p">][</span><span class="n">from</span><span class="mi">-1</span><span class="p">]</span><span class="o">=</span><span class="n">dis</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="n">min</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">prim</span><span class="p">();</span>
</span><span class='line'><span class="w">        </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">min</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>D题：统计同成绩学生人数（hdoj1235）（九度1018）</h3>


<p>水题，同样很水，代码如下：</p>


<p><figure class='code'><figcaption><span>Problem D </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span></span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="w"> </span><span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">,</span><span class="n">d</span><span class="p">[</span><span class="mi">1001</span><span class="p">],</span><span class="n">t</span><span class="p">,</span><span class="n">cnt</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="n">n</span><span class="p">)</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="w">            </span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">d</span><span class="o">+</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">t</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">t</span><span class="p">)</span><span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">cnt</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>E题：简单计算器（hdoj1237）（九度1019）</h3>


<p>有一点难度，但如果对此比较有研究，就不难了。
主要思路是利用栈，得到表达式的逆波兰式，再进行计算，代码如下：</p>


<p><figure class='code'><figcaption><span>Problem E </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span></span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="w"> </span><span class="o">&lt;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span><span class="w"> </span><span class="o">&lt;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">char</span><span class="w"> </span><span class="n">in</span><span class="p">[</span><span class="mi">202</span><span class="p">],</span><span class="n">cstk</span><span class="p">[</span><span class="mi">80</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="n">ct</span><span class="p">,</span><span class="n">dt</span><span class="p">;</span>
</span><span class='line'><span class="kt">double</span><span class="w"> </span><span class="n">dstk</span><span class="p">[</span><span class="mi">80</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="nf">cmp</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="n">c1</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="n">c2</span><span class="p">){</span>
</span><span class='line'><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="w">    </span><span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">c1</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="n">c2</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
</span><span class='line'><span class="w">            </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;+&#39;</span><span class="p">:</span>
</span><span class='line'><span class="w">            </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;-&#39;</span><span class="p">:</span>
</span><span class='line'><span class="w">                </span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="w">                </span><span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="w">            </span><span class="k">case</span><span class="w"> </span><span class="err">&#39;</span><span class="o">&lt;</span><span class="no">em</span><span class="o">&gt;</span><span class="err">&#39;</span><span class="p">:</span>
</span><span class='line'><span class="w">            </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;/&#39;</span><span class="p">:</span>
</span><span class='line'><span class="w">                </span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'><span class="w">                </span><span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">double</span><span class="w"> </span><span class="nf">cal</span><span class="p">(</span><span class="kt">double</span><span class="w"> </span><span class="n">da</span><span class="p">,</span><span class="kt">double</span><span class="w"> </span><span class="n">db</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="n">ch</span><span class="p">){</span>
</span><span class='line'><span class="w">    </span><span class="k">switch</span><span class="p">(</span><span class="n">ch</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;+&#39;</span><span class="p">:</span><span class="k">return</span><span class="w"> </span><span class="n">db</span><span class="o">+</span><span class="n">da</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;-&#39;</span><span class="p">:</span><span class="k">return</span><span class="w"> </span><span class="n">db</span><span class="o">-</span><span class="n">da</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="err">&#39;</span><span class="o">&lt;/</span><span class="no">em</span><span class="o">&gt;</span><span class="err">&#39;</span><span class="p">:</span><span class="k">return</span><span class="w"> </span><span class="n">db</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">da</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">case</span><span class="w"> </span><span class="sc">&#39;/&#39;</span><span class="p">:</span><span class="k">return</span><span class="w"> </span><span class="n">db</span><span class="o">/</span><span class="n">da</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="n">c1</span><span class="p">,</span><span class="n">c2</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="kt">double</span><span class="w"> </span><span class="n">da</span><span class="p">,</span><span class="n">db</span><span class="p">,</span><span class="n">dc</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'><span class="w">        </span><span class="n">gets</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="n">len</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">strlen</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
</span><span class='line'><span class="w">        </span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">==</span><span class="n">len</span><span class="w"> </span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="n">in</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;0&#39;</span><span class="p">)</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="n">ct</span><span class="o">=</span><span class="n">dt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'><span class="w">            </span><span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="w">            </span><span class="k">while</span><span class="p">(</span><span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&gt;=</span><span class="sc">&#39;0&#39;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span><span class="sc">&#39;9&#39;</span><span class="p">)</span>
</span><span class='line'><span class="w">                </span><span class="n">a</span><span class="o">=</span><span class="n">a</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="mi">10</span><span class="o">+</span><span class="p">(</span><span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'><span class="w">            </span><span class="n">dstk</span><span class="p">[</span><span class="n">dt</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="w">            </span><span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">len</span><span class="p">)</span><span class="n">cstk</span><span class="p">[</span><span class="n">ct</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">dt</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'><span class="w">            </span><span class="n">da</span><span class="o">=</span><span class="n">dstk</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">dstk</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">dstk</span><span class="p">[</span><span class="n">dt</span><span class="o">-</span><span class="n">i</span><span class="mi">-1</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">dstk</span><span class="p">[</span><span class="n">dt</span><span class="o">-</span><span class="n">i</span><span class="mi">-1</span><span class="p">]</span><span class="o">=</span><span class="n">da</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">ct</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'><span class="w">            </span><span class="n">c1</span><span class="o">=</span><span class="n">cstk</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">cstk</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="n">cstk</span><span class="p">[</span><span class="n">ct</span><span class="o">-</span><span class="n">i</span><span class="mi">-1</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">cstk</span><span class="p">[</span><span class="n">ct</span><span class="o">-</span><span class="n">i</span><span class="mi">-1</span><span class="p">]</span><span class="o">=</span><span class="n">c1</span><span class="p">;</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="k">while</span><span class="p">(</span><span class="n">ct</span><span class="p">){</span>
</span><span class='line'><span class="w">            </span><span class="n">da</span><span class="o">=</span><span class="n">dstk</span><span class="p">[</span><span class="o">--</span><span class="n">dt</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">db</span><span class="o">=</span><span class="n">dstk</span><span class="p">[</span><span class="o">--</span><span class="n">dt</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="n">c1</span><span class="o">=</span><span class="n">cstk</span><span class="p">[</span><span class="o">--</span><span class="n">ct</span><span class="p">];</span>
</span><span class='line'><span class="w">            </span><span class="k">if</span><span class="p">(</span><span class="n">ct</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="w">                </span><span class="n">c2</span><span class="o">=</span><span class="n">cstk</span><span class="p">[</span><span class="n">ct</span><span class="mi">-1</span><span class="p">];</span>
</span><span class='line'><span class="w">                </span><span class="k">if</span><span class="p">(</span><span class="n">cmp</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span><span class="n">c2</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'><span class="w">                    </span><span class="n">dstk</span><span class="p">[</span><span class="n">dt</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">cal</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">da</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="w">                </span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="w">                    </span><span class="n">dc</span><span class="o">=</span><span class="n">dstk</span><span class="p">[</span><span class="o">--</span><span class="n">dt</span><span class="p">];</span>
</span><span class='line'><span class="w">                    </span><span class="n">c2</span><span class="o">=</span><span class="n">cstk</span><span class="p">[</span><span class="o">--</span><span class="n">ct</span><span class="p">];</span>
</span><span class='line'><span class="w">                    </span><span class="n">dstk</span><span class="p">[</span><span class="n">dt</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">cal</span><span class="p">(</span><span class="n">dc</span><span class="p">,</span><span class="n">db</span><span class="p">,</span><span class="n">c2</span><span class="p">);</span>
</span><span class='line'><span class="w">                    </span><span class="n">dstk</span><span class="p">[</span><span class="n">dt</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">da</span><span class="p">;</span>
</span><span class='line'><span class="w">                    </span><span class="n">cstk</span><span class="p">[</span><span class="n">ct</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">c1</span><span class="p">;</span>
</span><span class='line'><span class="w">                </span><span class="p">}</span>
</span><span class='line'><span class="w">            </span><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'><span class="w">                </span><span class="n">dstk</span><span class="p">[</span><span class="n">dt</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="n">cal</span><span class="p">(</span><span class="n">db</span><span class="p">,</span><span class="n">da</span><span class="p">,</span><span class="n">c1</span><span class="p">);</span>
</span><span class='line'><span class="w">            </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="p">}</span>
</span><span class='line'><span class="w">        </span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.2f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">dstk</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>小结：总体而言不是很难，主要是水题很水，而难点的题也不是很难，稍微耐心、细心点，就能AC了。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈C语言的可变参数]]></title>
    <link href="http://ibillxia.github.io/blog/2011/04/21/about-variable-parameters-in-c-language/"/>
    <updated>2011-04-21T16:50:00+08:00</updated>
    <id>http://ibillxia.github.io/blog/2011/04/21/about-variable-parameters-in-c-language</id>
    <content type="html"><![CDATA[<h2>1.问题引入</h2>


<p>
C语言中有些函数使用可变参数，比如常见的 `int printf( const char *format [, argument]... );`，
第一个参数format是固定的，其余的参数的个数和类型都不固定。例如：</p>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span></span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Enjoy yourself everyday!/n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;The value is %d!/n&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">value</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>这种可变参数可以说是C语言一个比较难理解的部分，这里会由几个问题引发一些对它的分析。
注意：在C++中有函数重载（overload）可以用来区别不同函数参数的调用，但它还是不能表示任意数量的函数参数。</p>




<h2>2.printf（）实现原理</h2>


<p>
C语言用va_start等宏来处理这些可变参数。这些宏看起来很复杂，其实原理挺简单，
就是根据参数入栈的特点从最靠近第一个可变参数的固定参数开始，依次获取每个可变参数的地址。
下面我们来分析这些宏。</p>




<!-- more -->


<p>在`stdarg.h`头文件中，针对不同平台有不同的宏定义，我们选取X86平台下的宏定义：</p>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span></span><span class="k">typedef</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="kt">va_list</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span><span class="w"> </span><span class="n">_INTSIZEOF</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="w"> </span><span class="o">~</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span><span class="w"> </span><span class="n">va_start</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span><span class="n">v</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">ap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">va_list</span><span class="p">)</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">v</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">_INTSIZEOF</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w"> </span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span><span class="w"> </span><span class="n">va_arg</span><span class="p">(</span><span class="n">ap</span><span class="p">,</span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)((</span><span class="n">ap</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">INTSIZEOF</span><span class="p">(</span><span class="n">t</span><span class="p">))</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">INTSIZEOF</span><span class="p">(</span><span class="n">t</span><span class="p">))</span><span class="w"> </span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span><span class="w"> </span><span class="n">va_end</span><span class="p">(</span><span class="n">ap</span><span class="p">)</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="n">ap</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">va_list</span><span class="p">)</span><span class="mi">0</span><span class="w"> </span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>_INTSIZEOF(n)宏是为了考虑那些内存地址需要对齐的系统，从宏的名字来应该是跟sizeof(int)对齐。
一般的`sizeof(int)=4`，也就是参数在内存中的地址都为4的倍数。比如，如果sizeof(n)在1－4之间，
那`_INTSIZEOF(n)＝4`；如果`sizeof(n)`在5－8之间，那么`_INTSIZEOF(n)=8`。</p>




<p>为了能从固定参数依次得到每个可变参数，`va_start`，`va_arg`充分利用下面两点：</br>
&nbsp;&nbsp;&nbsp;&nbsp;1．C语言在函数调用时，先将最后一个参数压入栈;</br>
&nbsp;&nbsp;&nbsp;&nbsp;2．X86平台下的内存分配顺序是从高地址内存到低地址内存</br>
<center><img src="/images/2011/IMAG2011042101.png"></center></p>




<p>由上图可见，`v`是固定参数在内存中的地址，在调用`va_start`后，`ap`指向第一个可变参数。
这个宏的作用就是在v的内存地址上增加v所占的内存大小，这样就得到了第一个可变参数的地址。</p>




<p>接下来，可以这样设想，如果我能确定这个可变参数的类型，那么我就知道了它占用了多少内存，
依葫芦画瓢，我就能得到下一个可变参数的地址。</p>




<p>让我们再来看看`va_arg`，它先`ap`指向下一个可变参数，然后减去当前可变参数的大小即得到当前
可变参数的内存地址，再做个类型转换，返回它的值。</br>
要确定每个可变参数的类型，有两种做法，要么都是默认的类型，要么就在固定参数中包含足够的
信息让程序可以确定每个可变参数的类型。比如，`printf`，程序通过分析`format`字符串就可以
确定每个可变参数大类型。</br>
最后一个宏就简单了，`va_end`使得`ap`不再指向有效的内存地址。</p>




<p>看了这几个宏，不禁让我再次感慨，C语言太灵活了，而且代码可以写得非常简洁，
虽然有时候让人看得不是很明白，但是一旦明白 过来，你肯定会为它击掌叫好！</br>
其实在`varargs.h`头文件中定义了UNIX System V实行的`va`系列宏，而上面在`stdarg.h`头文件中
定义的是ANSI C形式的宏，这两种宏是不兼容的，一般说来，我们应该使用ANSI C形式的`va`宏。</p>




<h2>3.实战演练</h2>


<p>有没有办法写一个函数，这个函数参数的具体形式可以在运行时才确定？</br>
系统提供了`vprintf`系列格式化字符串的函数，用于编程人员封装自己的I/O函数。</p>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span></span><span class="kt">int</span><span class="w"> </span><span class="n">vprintf</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">vscanf</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">format</span><span class="p">,</span><span class="w"> </span><span class="kt">va_list</span><span class="w"> </span><span class="n">ap</span><span class="p">);</span><span class="w"> </span><span class="c1">// 从标准输入/输出格式化字符串</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="n">vfprintf</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">vfsacanf</span><span class="p">(</span><span class="kt">FILE</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">stream</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">format</span><span class="p">,</span><span class="w"> </span><span class="kt">va_list</span><span class="w"> </span><span class="n">ap</span><span class="p">);</span><span class="c1">// 从文件流</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="n">vsprintf</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">vsscanf</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">format</span><span class="p">,</span><span class="w"> </span><span class="kt">va_list</span><span class="w"> </span><span class="n">ap</span><span class="p">);</span><span class="w"> </span><span class="c1">// 从字符串</span>
</span><span class='line'><span class="c1">// 例1：格式化到一个文件流，可用于日志文件</span>
</span><span class='line'><span class="kt">FILE</span><span class="w"> </span><span class="o">*</span><span class="n">logfile</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="nf">WriteLog</span><span class="p">(</span><span class="k">const</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">format</span><span class="p">,</span><span class="w"> </span><span class="p">...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="w">   </span><span class="kt">va_list</span><span class="w"> </span><span class="n">arg_ptr</span><span class="p">;</span>
</span><span class='line'><span class="w">   </span><span class="n">va_start</span><span class="p">(</span><span class="n">arg_ptr</span><span class="p">,</span><span class="w"> </span><span class="n">format</span><span class="p">);</span>
</span><span class='line'><span class="w">   </span><span class="kt">int</span><span class="w"> </span><span class="n">nWrittenBytes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">vfprintf</span><span class="p">(</span><span class="n">logfile</span><span class="p">,</span><span class="w"> </span><span class="n">format</span><span class="p">,</span><span class="w"> </span><span class="n">arg_ptr</span><span class="p">);</span>
</span><span class='line'><span class="w">   </span><span class="n">va_end</span><span class="p">(</span><span class="n">arg_ptr</span><span class="p">);</span>
</span><span class='line'><span class="w">   </span><span class="k">return</span><span class="w"> </span><span class="n">nWrittenBytes</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// 调用时，与使用printf()没有区别。</span>
</span><span class='line'><span class="n">WriteLog</span><span class="p">(</span><span class="s">&quot;%04d-%02d-%02d %02d:%02d:%02d %s/%04d logged out.&quot;</span><span class="p">,</span><span class="w"> </span><span class="n">nYear</span><span class="p">,</span><span class="w"> </span><span class="n">nMonth</span><span class="p">,</span><span class="w"> </span><span class="n">nDay</span><span class="p">,</span><span class="w"> </span><span class="n">nHour</span><span class="p">,</span><span class="w"> </span><span class="n">nMinute</span><span class="p">,</span><span class="w"> </span><span class="n">szUserName</span><span class="p">,</span><span class="w"> </span><span class="n">nUserID</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>同理，也可以从文件中执行格式化输入；或者对标准输入输出，字符串执行格式化。</br>
在上面的例1中，`WriteLog()`函数可以接受参数个数可变的输入，本质上，它的实现需要`vprintf()`的支持。
如何真正实现属于自己的可变参数函数，包括控制每一个传入的可选参数。</p>




<h2>4.关于va()函数和va宏</h2>


<p>C语言支持`va`函数，作为C语言的扩展--C++同样支持`va`函数，但在C++中并不推荐使用，C++引入的
多态性同样可以实现参数个数可变的函数。不过，C++的重载功能毕竟只能是有限多个可以预见的参数个数。
比较而言，C中的`va`函数则可以定义无穷多个相当于C++的重载函数，这方面C++是无能为力的。`va`函数的
优势表现在使用的方便性和易用性上，可以使代码更简洁。C编译器为了统一在不同的硬件架构、硬件
平台上的实现，和增加代码的可移植性，提供了一系列宏来屏蔽硬件环境不同带来的差异。</p>




<p>ANSI C标准下，`va`的宏定义在`stdarg.h`中，它们有：`va_list`，`va_start()`，`va_arg()`，`va_end()`。</p>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span></span><span class="c1">// 例2：求任意个自然数的平方和：</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="nf">SqSum</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n1</span><span class="p">,</span><span class="w"> </span><span class="p">...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="w">   </span><span class="kt">va_list</span><span class="w"> </span><span class="n">arg_ptr</span><span class="p">;</span>
</span><span class='line'><span class="w">   </span><span class="kt">int</span><span class="w"> </span><span class="n">nSqSum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n1</span><span class="p">;</span>
</span><span class='line'><span class="w">   </span><span class="n">va_start</span><span class="p">(</span><span class="n">arg_ptr</span><span class="p">,</span><span class="w"> </span><span class="n">n1</span><span class="p">);</span>
</span><span class='line'><span class="w">   </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="w">  </span><span class="p">{</span>
</span><span class='line'><span class="n">nSqSum</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="p">(</span><span class="n">n</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="n">n</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">va_arg</span><span class="p">(</span><span class="n">arg_ptr</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="p">);</span>
</span><span class='line'><span class="w">  </span><span class="p">}</span>
</span><span class='line'><span class="w">  </span><span class="n">va_end</span><span class="p">(</span><span class="n">arg_ptr</span><span class="p">);</span>
</span><span class='line'><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="n">nSqSum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// 调用时</span>
</span><span class='line'><span class="kt">int</span><span class="w"> </span><span class="n">nSqSum</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">SqSum</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w"> </span><span class="mi">11</span><span class="p">,</span><span class="w"> </span><span class="mi">-1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>可变参数函数的原型声明格式为：</p>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span></span><span class="n">type</span><span class="w"> </span><span class="nf">VAFunction</span><span class="p">(</span><span class="n">type</span><span class="w"> </span><span class="n">arg1</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="w"> </span><span class="n">arg2</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>参数可以分为两部分：个数确定的固定参数和个数可变的可选参数。函数至少需要一个固定参数，
固定参数的声明和普通函数一样；可选参数由于个数不确定，声明时用"..."表示。固定参数和可选
参数公同构成一个函数的参数列表。借助上面这个简单的例2，来看看各个`va_xxx`的作用。</p>




<p>`va_list arg_ptr`：定义一个指向个数可变的参数列表指针；</br>
`va_start(arg_ptr, argN)`：使参数列表指针`arg_ptr`指向函数参数列表中的第一个可选参数，
说明：`argN`是位于第一个可选参数之前的固定参数，（或者说，最后一个固定参数；...
之前的一个参数），函数参数列表中参数在内存中的顺序与函数声明时的顺序是一致的。
如果有一`va`函数的声明是`void va_test(char a, char b, char c, ...)`，则它的固定
参数依次是a,b,c，最后一个固定参数argN为c，因此就是`va_start(arg_ptr, c)`。</br>
`va_arg(arg_ptr, type)`：返回参数列表中指针`arg_ptr`所指的参数，返回类型为`type`，
并使指针`arg_ptr`指向参数列表中下一个参数。</br>
`va_copy(dest, src)`：`dest`，`src`的类型都是`va_list`，`va_copy()`用于复制参数列表指针，将`dest`初始化为`src`。</br>
`va_end(arg_ptr)`：清空参数列表，并置参数指针`arg_ptr`无效。说明：指针`arg_ptr`被置无效后，
可以通过调用`va_start()`、`va_copy()`恢复`arg_ptr`。每次调用`va_start() / va_copy()`后，
必须得有相应的`va_end()`与之匹配。参数指针可以在参数列表中随意地来回移动，
但必须在`va_start() ... va_end()`之内。</p>



]]></content>
  </entry>
  
</feed>